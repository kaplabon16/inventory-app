
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Inventory
 * 
 */
export type Inventory = $Result.DefaultSelection<Prisma.$InventoryPayload>
/**
 * Model InventoryField
 * 
 */
export type InventoryField = $Result.DefaultSelection<Prisma.$InventoryFieldPayload>
/**
 * Model CustomIdElement
 * 
 */
export type CustomIdElement = $Result.DefaultSelection<Prisma.$CustomIdElementPayload>
/**
 * Model Sequence
 * 
 */
export type Sequence = $Result.DefaultSelection<Prisma.$SequencePayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model InventoryTag
 * 
 */
export type InventoryTag = $Result.DefaultSelection<Prisma.$InventoryTagPayload>
/**
 * Model InventoryAccess
 * 
 */
export type InventoryAccess = $Result.DefaultSelection<Prisma.$InventoryAccessPayload>
/**
 * Model Like
 * 
 */
export type Like = $Result.DefaultSelection<Prisma.$LikePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const FieldType: {
  TEXT: 'TEXT',
  MTEXT: 'MTEXT',
  NUMBER: 'NUMBER',
  LINK: 'LINK',
  BOOL: 'BOOL',
  IMAGE: 'IMAGE'
};

export type FieldType = (typeof FieldType)[keyof typeof FieldType]


export const IdElemType: {
  FIXED: 'FIXED',
  RAND20: 'RAND20',
  RAND32: 'RAND32',
  RAND6: 'RAND6',
  RAND9: 'RAND9',
  GUID: 'GUID',
  DATE: 'DATE',
  SEQ: 'SEQ'
};

export type IdElemType = (typeof IdElemType)[keyof typeof IdElemType]

}

export type FieldType = $Enums.FieldType

export const FieldType: typeof $Enums.FieldType

export type IdElemType = $Enums.IdElemType

export const IdElemType: typeof $Enums.IdElemType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.inventory`: Exposes CRUD operations for the **Inventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventories
    * const inventories = await prisma.inventory.findMany()
    * ```
    */
  get inventory(): Prisma.InventoryDelegate<ExtArgs>;

  /**
   * `prisma.inventoryField`: Exposes CRUD operations for the **InventoryField** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryFields
    * const inventoryFields = await prisma.inventoryField.findMany()
    * ```
    */
  get inventoryField(): Prisma.InventoryFieldDelegate<ExtArgs>;

  /**
   * `prisma.customIdElement`: Exposes CRUD operations for the **CustomIdElement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomIdElements
    * const customIdElements = await prisma.customIdElement.findMany()
    * ```
    */
  get customIdElement(): Prisma.CustomIdElementDelegate<ExtArgs>;

  /**
   * `prisma.sequence`: Exposes CRUD operations for the **Sequence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sequences
    * const sequences = await prisma.sequence.findMany()
    * ```
    */
  get sequence(): Prisma.SequenceDelegate<ExtArgs>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.inventoryTag`: Exposes CRUD operations for the **InventoryTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryTags
    * const inventoryTags = await prisma.inventoryTag.findMany()
    * ```
    */
  get inventoryTag(): Prisma.InventoryTagDelegate<ExtArgs>;

  /**
   * `prisma.inventoryAccess`: Exposes CRUD operations for the **InventoryAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryAccesses
    * const inventoryAccesses = await prisma.inventoryAccess.findMany()
    * ```
    */
  get inventoryAccess(): Prisma.InventoryAccessDelegate<ExtArgs>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Category: 'Category',
    Inventory: 'Inventory',
    InventoryField: 'InventoryField',
    CustomIdElement: 'CustomIdElement',
    Sequence: 'Sequence',
    Item: 'Item',
    Comment: 'Comment',
    Tag: 'Tag',
    InventoryTag: 'InventoryTag',
    InventoryAccess: 'InventoryAccess',
    Like: 'Like'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "category" | "inventory" | "inventoryField" | "customIdElement" | "sequence" | "item" | "comment" | "tag" | "inventoryTag" | "inventoryAccess" | "like"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Inventory: {
        payload: Prisma.$InventoryPayload<ExtArgs>
        fields: Prisma.InventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findFirst: {
            args: Prisma.InventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findMany: {
            args: Prisma.InventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          create: {
            args: Prisma.InventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          createMany: {
            args: Prisma.InventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          delete: {
            args: Prisma.InventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          update: {
            args: Prisma.InventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          deleteMany: {
            args: Prisma.InventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          aggregate: {
            args: Prisma.InventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventory>
          }
          groupBy: {
            args: Prisma.InventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountAggregateOutputType> | number
          }
        }
      }
      InventoryField: {
        payload: Prisma.$InventoryFieldPayload<ExtArgs>
        fields: Prisma.InventoryFieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryFieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryFieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload>
          }
          findFirst: {
            args: Prisma.InventoryFieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryFieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload>
          }
          findMany: {
            args: Prisma.InventoryFieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload>[]
          }
          create: {
            args: Prisma.InventoryFieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload>
          }
          createMany: {
            args: Prisma.InventoryFieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryFieldCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload>[]
          }
          delete: {
            args: Prisma.InventoryFieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload>
          }
          update: {
            args: Prisma.InventoryFieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload>
          }
          deleteMany: {
            args: Prisma.InventoryFieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryFieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryFieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryFieldPayload>
          }
          aggregate: {
            args: Prisma.InventoryFieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryField>
          }
          groupBy: {
            args: Prisma.InventoryFieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryFieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryFieldCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryFieldCountAggregateOutputType> | number
          }
        }
      }
      CustomIdElement: {
        payload: Prisma.$CustomIdElementPayload<ExtArgs>
        fields: Prisma.CustomIdElementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomIdElementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomIdElementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload>
          }
          findFirst: {
            args: Prisma.CustomIdElementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomIdElementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload>
          }
          findMany: {
            args: Prisma.CustomIdElementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload>[]
          }
          create: {
            args: Prisma.CustomIdElementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload>
          }
          createMany: {
            args: Prisma.CustomIdElementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomIdElementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload>[]
          }
          delete: {
            args: Prisma.CustomIdElementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload>
          }
          update: {
            args: Prisma.CustomIdElementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload>
          }
          deleteMany: {
            args: Prisma.CustomIdElementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomIdElementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomIdElementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomIdElementPayload>
          }
          aggregate: {
            args: Prisma.CustomIdElementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomIdElement>
          }
          groupBy: {
            args: Prisma.CustomIdElementGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomIdElementGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomIdElementCountArgs<ExtArgs>
            result: $Utils.Optional<CustomIdElementCountAggregateOutputType> | number
          }
        }
      }
      Sequence: {
        payload: Prisma.$SequencePayload<ExtArgs>
        fields: Prisma.SequenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SequenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SequenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload>
          }
          findFirst: {
            args: Prisma.SequenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SequenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload>
          }
          findMany: {
            args: Prisma.SequenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload>[]
          }
          create: {
            args: Prisma.SequenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload>
          }
          createMany: {
            args: Prisma.SequenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SequenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload>[]
          }
          delete: {
            args: Prisma.SequenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload>
          }
          update: {
            args: Prisma.SequenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload>
          }
          deleteMany: {
            args: Prisma.SequenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SequenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SequenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequencePayload>
          }
          aggregate: {
            args: Prisma.SequenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSequence>
          }
          groupBy: {
            args: Prisma.SequenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<SequenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.SequenceCountArgs<ExtArgs>
            result: $Utils.Optional<SequenceCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      InventoryTag: {
        payload: Prisma.$InventoryTagPayload<ExtArgs>
        fields: Prisma.InventoryTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload>
          }
          findFirst: {
            args: Prisma.InventoryTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload>
          }
          findMany: {
            args: Prisma.InventoryTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload>[]
          }
          create: {
            args: Prisma.InventoryTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload>
          }
          createMany: {
            args: Prisma.InventoryTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload>[]
          }
          delete: {
            args: Prisma.InventoryTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload>
          }
          update: {
            args: Prisma.InventoryTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload>
          }
          deleteMany: {
            args: Prisma.InventoryTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTagPayload>
          }
          aggregate: {
            args: Prisma.InventoryTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryTag>
          }
          groupBy: {
            args: Prisma.InventoryTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryTagCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryTagCountAggregateOutputType> | number
          }
        }
      }
      InventoryAccess: {
        payload: Prisma.$InventoryAccessPayload<ExtArgs>
        fields: Prisma.InventoryAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryAccessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryAccessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload>
          }
          findFirst: {
            args: Prisma.InventoryAccessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryAccessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload>
          }
          findMany: {
            args: Prisma.InventoryAccessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload>[]
          }
          create: {
            args: Prisma.InventoryAccessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload>
          }
          createMany: {
            args: Prisma.InventoryAccessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryAccessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload>[]
          }
          delete: {
            args: Prisma.InventoryAccessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload>
          }
          update: {
            args: Prisma.InventoryAccessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload>
          }
          deleteMany: {
            args: Prisma.InventoryAccessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryAccessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryAccessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryAccessPayload>
          }
          aggregate: {
            args: Prisma.InventoryAccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryAccess>
          }
          groupBy: {
            args: Prisma.InventoryAccessGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryAccessCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryAccessCountAggregateOutputType> | number
          }
        }
      }
      Like: {
        payload: Prisma.$LikePayload<ExtArgs>
        fields: Prisma.LikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findFirst: {
            args: Prisma.LikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findMany: {
            args: Prisma.LikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          create: {
            args: Prisma.LikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          createMany: {
            args: Prisma.LikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          delete: {
            args: Prisma.LikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          update: {
            args: Prisma.LikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          deleteMany: {
            args: Prisma.LikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          aggregate: {
            args: Prisma.LikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLike>
          }
          groupBy: {
            args: Prisma.LikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeCountArgs<ExtArgs>
            result: $Utils.Optional<LikeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    inventories: number
    items: number
    comments: number
    accesses: number
    likes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventories?: boolean | UserCountOutputTypeCountInventoriesArgs
    items?: boolean | UserCountOutputTypeCountItemsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    accesses?: boolean | UserCountOutputTypeCountAccessesArgs
    likes?: boolean | UserCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryAccessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    inventories: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventories?: boolean | CategoryCountOutputTypeCountInventoriesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
  }


  /**
   * Count Type InventoryCountOutputType
   */

  export type InventoryCountOutputType = {
    fields: number
    idElems: number
    items: number
    tags: number
    access: number
    comments: number
  }

  export type InventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fields?: boolean | InventoryCountOutputTypeCountFieldsArgs
    idElems?: boolean | InventoryCountOutputTypeCountIdElemsArgs
    items?: boolean | InventoryCountOutputTypeCountItemsArgs
    tags?: boolean | InventoryCountOutputTypeCountTagsArgs
    access?: boolean | InventoryCountOutputTypeCountAccessArgs
    comments?: boolean | InventoryCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountOutputType
     */
    select?: InventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryFieldWhereInput
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountIdElemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomIdElementWhereInput
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryTagWhereInput
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryAccessWhereInput
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type ItemCountOutputType
   */

  export type ItemCountOutputType = {
    comments: number
    likes: number
  }

  export type ItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | ItemCountOutputTypeCountCommentsArgs
    likes?: boolean | ItemCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemCountOutputType
     */
    select?: ItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    inventories: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventories?: boolean | TagCountOutputTypeCountInventoriesArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryTagWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    avatar: string | null
    provider: string | null
    providerId: string | null
    blocked: boolean | null
    createdAt: Date | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    avatar: string | null
    provider: string | null
    providerId: string | null
    blocked: boolean | null
    createdAt: Date | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    avatar: number
    provider: number
    providerId: number
    roles: number
    blocked: number
    createdAt: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    avatar?: true
    provider?: true
    providerId?: true
    blocked?: true
    createdAt?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    avatar?: true
    provider?: true
    providerId?: true
    blocked?: true
    createdAt?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    avatar?: true
    provider?: true
    providerId?: true
    roles?: true
    blocked?: true
    createdAt?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    avatar: string | null
    provider: string | null
    providerId: string | null
    roles: string[]
    blocked: boolean
    createdAt: Date
    password: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    avatar?: boolean
    provider?: boolean
    providerId?: boolean
    roles?: boolean
    blocked?: boolean
    createdAt?: boolean
    password?: boolean
    inventories?: boolean | User$inventoriesArgs<ExtArgs>
    items?: boolean | User$itemsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    accesses?: boolean | User$accessesArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    avatar?: boolean
    provider?: boolean
    providerId?: boolean
    roles?: boolean
    blocked?: boolean
    createdAt?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    avatar?: boolean
    provider?: boolean
    providerId?: boolean
    roles?: boolean
    blocked?: boolean
    createdAt?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventories?: boolean | User$inventoriesArgs<ExtArgs>
    items?: boolean | User$itemsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    accesses?: boolean | User$accessesArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      inventories: Prisma.$InventoryPayload<ExtArgs>[]
      items: Prisma.$ItemPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      accesses: Prisma.$InventoryAccessPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      avatar: string | null
      provider: string | null
      providerId: string | null
      roles: string[]
      blocked: boolean
      createdAt: Date
      password: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventories<T extends User$inventoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$inventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany"> | Null>
    items<T extends User$itemsArgs<ExtArgs> = {}>(args?: Subset<T, User$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    accesses<T extends User$accessesArgs<ExtArgs> = {}>(args?: Subset<T, User$accessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends User$likesArgs<ExtArgs> = {}>(args?: Subset<T, User$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly provider: FieldRef<"User", 'String'>
    readonly providerId: FieldRef<"User", 'String'>
    readonly roles: FieldRef<"User", 'String[]'>
    readonly blocked: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.inventories
   */
  export type User$inventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    cursor?: InventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * User.items
   */
  export type User$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.accesses
   */
  export type User$accessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    where?: InventoryAccessWhereInput
    orderBy?: InventoryAccessOrderByWithRelationInput | InventoryAccessOrderByWithRelationInput[]
    cursor?: InventoryAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryAccessScalarFieldEnum | InventoryAccessScalarFieldEnum[]
  }

  /**
   * User.likes
   */
  export type User$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    inventories?: boolean | Category$inventoriesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventories?: boolean | Category$inventoriesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      inventories: Prisma.$InventoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventories<T extends Category$inventoriesArgs<ExtArgs> = {}>(args?: Subset<T, Category$inventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.inventories
   */
  export type Category$inventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    cursor?: InventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Inventory
   */

  export type AggregateInventory = {
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  export type InventoryAvgAggregateOutputType = {
    categoryId: number | null
    version: number | null
  }

  export type InventorySumAggregateOutputType = {
    categoryId: number | null
    version: number | null
  }

  export type InventoryMinAggregateOutputType = {
    id: string | null
    ownerId: string | null
    title: string | null
    description: string | null
    categoryId: number | null
    imageUrl: string | null
    publicWrite: boolean | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryMaxAggregateOutputType = {
    id: string | null
    ownerId: string | null
    title: string | null
    description: string | null
    categoryId: number | null
    imageUrl: string | null
    publicWrite: boolean | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryCountAggregateOutputType = {
    id: number
    ownerId: number
    title: number
    description: number
    categoryId: number
    imageUrl: number
    publicWrite: number
    version: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InventoryAvgAggregateInputType = {
    categoryId?: true
    version?: true
  }

  export type InventorySumAggregateInputType = {
    categoryId?: true
    version?: true
  }

  export type InventoryMinAggregateInputType = {
    id?: true
    ownerId?: true
    title?: true
    description?: true
    categoryId?: true
    imageUrl?: true
    publicWrite?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryMaxAggregateInputType = {
    id?: true
    ownerId?: true
    title?: true
    description?: true
    categoryId?: true
    imageUrl?: true
    publicWrite?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryCountAggregateInputType = {
    id?: true
    ownerId?: true
    title?: true
    description?: true
    categoryId?: true
    imageUrl?: true
    publicWrite?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventory to aggregate.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inventories
    **/
    _count?: true | InventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMaxAggregateInputType
  }

  export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory[P]>
      : GetScalarType<T[P], AggregateInventory[P]>
  }




  export type InventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithAggregationInput | InventoryOrderByWithAggregationInput[]
    by: InventoryScalarFieldEnum[] | InventoryScalarFieldEnum
    having?: InventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountAggregateInputType | true
    _avg?: InventoryAvgAggregateInputType
    _sum?: InventorySumAggregateInputType
    _min?: InventoryMinAggregateInputType
    _max?: InventoryMaxAggregateInputType
  }

  export type InventoryGroupByOutputType = {
    id: string
    ownerId: string
    title: string
    description: string
    categoryId: number
    imageUrl: string | null
    publicWrite: boolean
    version: number
    createdAt: Date
    updatedAt: Date
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  type GetInventoryGroupByPayload<T extends InventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryGroupByOutputType[P]>
        }
      >
    >


  export type InventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    title?: boolean
    description?: boolean
    categoryId?: boolean
    imageUrl?: boolean
    publicWrite?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    fields?: boolean | Inventory$fieldsArgs<ExtArgs>
    idElems?: boolean | Inventory$idElemsArgs<ExtArgs>
    items?: boolean | Inventory$itemsArgs<ExtArgs>
    tags?: boolean | Inventory$tagsArgs<ExtArgs>
    access?: boolean | Inventory$accessArgs<ExtArgs>
    comments?: boolean | Inventory$commentsArgs<ExtArgs>
    sequence?: boolean | Inventory$sequenceArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    title?: boolean
    description?: boolean
    categoryId?: boolean
    imageUrl?: boolean
    publicWrite?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectScalar = {
    id?: boolean
    ownerId?: boolean
    title?: boolean
    description?: boolean
    categoryId?: boolean
    imageUrl?: boolean
    publicWrite?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    fields?: boolean | Inventory$fieldsArgs<ExtArgs>
    idElems?: boolean | Inventory$idElemsArgs<ExtArgs>
    items?: boolean | Inventory$itemsArgs<ExtArgs>
    tags?: boolean | Inventory$tagsArgs<ExtArgs>
    access?: boolean | Inventory$accessArgs<ExtArgs>
    comments?: boolean | Inventory$commentsArgs<ExtArgs>
    sequence?: boolean | Inventory$sequenceArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $InventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inventory"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
      fields: Prisma.$InventoryFieldPayload<ExtArgs>[]
      idElems: Prisma.$CustomIdElementPayload<ExtArgs>[]
      items: Prisma.$ItemPayload<ExtArgs>[]
      tags: Prisma.$InventoryTagPayload<ExtArgs>[]
      access: Prisma.$InventoryAccessPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      sequence: Prisma.$SequencePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ownerId: string
      title: string
      description: string
      categoryId: number
      imageUrl: string | null
      publicWrite: boolean
      version: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inventory"]>
    composites: {}
  }

  type InventoryGetPayload<S extends boolean | null | undefined | InventoryDefaultArgs> = $Result.GetResult<Prisma.$InventoryPayload, S>

  type InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryCountAggregateInputType | true
    }

  export interface InventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inventory'], meta: { name: 'Inventory' } }
    /**
     * Find zero or one Inventory that matches the filter.
     * @param {InventoryFindUniqueArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryFindUniqueArgs>(args: SelectSubset<T, InventoryFindUniqueArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Inventory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Inventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryFindFirstArgs>(args?: SelectSubset<T, InventoryFindFirstArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Inventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Inventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventories
     * const inventories = await prisma.inventory.findMany()
     * 
     * // Get first 10 Inventories
     * const inventories = await prisma.inventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryWithIdOnly = await prisma.inventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryFindManyArgs>(args?: SelectSubset<T, InventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Inventory.
     * @param {InventoryCreateArgs} args - Arguments to create a Inventory.
     * @example
     * // Create one Inventory
     * const Inventory = await prisma.inventory.create({
     *   data: {
     *     // ... data to create a Inventory
     *   }
     * })
     * 
     */
    create<T extends InventoryCreateArgs>(args: SelectSubset<T, InventoryCreateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Inventories.
     * @param {InventoryCreateManyArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryCreateManyArgs>(args?: SelectSubset<T, InventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inventories and returns the data saved in the database.
     * @param {InventoryCreateManyAndReturnArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inventories and only return the `id`
     * const inventoryWithIdOnly = await prisma.inventory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Inventory.
     * @param {InventoryDeleteArgs} args - Arguments to delete one Inventory.
     * @example
     * // Delete one Inventory
     * const Inventory = await prisma.inventory.delete({
     *   where: {
     *     // ... filter to delete one Inventory
     *   }
     * })
     * 
     */
    delete<T extends InventoryDeleteArgs>(args: SelectSubset<T, InventoryDeleteArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Inventory.
     * @param {InventoryUpdateArgs} args - Arguments to update one Inventory.
     * @example
     * // Update one Inventory
     * const inventory = await prisma.inventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryUpdateArgs>(args: SelectSubset<T, InventoryUpdateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Inventories.
     * @param {InventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
     * @example
     * // Delete a few Inventories
     * const { count } = await prisma.inventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryDeleteManyArgs>(args?: SelectSubset<T, InventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryUpdateManyArgs>(args: SelectSubset<T, InventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inventory.
     * @param {InventoryUpsertArgs} args - Arguments to update or create a Inventory.
     * @example
     * // Update or create a Inventory
     * const inventory = await prisma.inventory.upsert({
     *   create: {
     *     // ... data to create a Inventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory we want to update
     *   }
     * })
     */
    upsert<T extends InventoryUpsertArgs>(args: SelectSubset<T, InventoryUpsertArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountArgs} args - Arguments to filter Inventories to count.
     * @example
     * // Count the number of Inventories
     * const count = await prisma.inventory.count({
     *   where: {
     *     // ... the filter for the Inventories we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountArgs>(
      args?: Subset<T, InventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAggregateArgs>(args: Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

    /**
     * Group by Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryGroupByArgs['orderBy'] }
        : { orderBy?: InventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inventory model
   */
  readonly fields: InventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fields<T extends Inventory$fieldsArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$fieldsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "findMany"> | Null>
    idElems<T extends Inventory$idElemsArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$idElemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "findMany"> | Null>
    items<T extends Inventory$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Inventory$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "findMany"> | Null>
    access<T extends Inventory$accessArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$accessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Inventory$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    sequence<T extends Inventory$sequenceArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$sequenceArgs<ExtArgs>>): Prisma__SequenceClient<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inventory model
   */ 
  interface InventoryFieldRefs {
    readonly id: FieldRef<"Inventory", 'String'>
    readonly ownerId: FieldRef<"Inventory", 'String'>
    readonly title: FieldRef<"Inventory", 'String'>
    readonly description: FieldRef<"Inventory", 'String'>
    readonly categoryId: FieldRef<"Inventory", 'Int'>
    readonly imageUrl: FieldRef<"Inventory", 'String'>
    readonly publicWrite: FieldRef<"Inventory", 'Boolean'>
    readonly version: FieldRef<"Inventory", 'Int'>
    readonly createdAt: FieldRef<"Inventory", 'DateTime'>
    readonly updatedAt: FieldRef<"Inventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Inventory findUnique
   */
  export type InventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findUniqueOrThrow
   */
  export type InventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findFirst
   */
  export type InventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findFirstOrThrow
   */
  export type InventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findMany
   */
  export type InventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventories to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory create
   */
  export type InventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inventory.
     */
    data: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
  }

  /**
   * Inventory createMany
   */
  export type InventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inventory createManyAndReturn
   */
  export type InventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inventory update
   */
  export type InventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inventory.
     */
    data: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
    /**
     * Choose, which Inventory to update.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory updateMany
   */
  export type InventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
  }

  /**
   * Inventory upsert
   */
  export type InventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inventory to update in case it exists.
     */
    where: InventoryWhereUniqueInput
    /**
     * In case the Inventory found by the `where` argument doesn't exist, create a new Inventory with this data.
     */
    create: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
    /**
     * In case the Inventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
  }

  /**
   * Inventory delete
   */
  export type InventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter which Inventory to delete.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory deleteMany
   */
  export type InventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventories to delete
     */
    where?: InventoryWhereInput
  }

  /**
   * Inventory.fields
   */
  export type Inventory$fieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    where?: InventoryFieldWhereInput
    orderBy?: InventoryFieldOrderByWithRelationInput | InventoryFieldOrderByWithRelationInput[]
    cursor?: InventoryFieldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryFieldScalarFieldEnum | InventoryFieldScalarFieldEnum[]
  }

  /**
   * Inventory.idElems
   */
  export type Inventory$idElemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    where?: CustomIdElementWhereInput
    orderBy?: CustomIdElementOrderByWithRelationInput | CustomIdElementOrderByWithRelationInput[]
    cursor?: CustomIdElementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomIdElementScalarFieldEnum | CustomIdElementScalarFieldEnum[]
  }

  /**
   * Inventory.items
   */
  export type Inventory$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Inventory.tags
   */
  export type Inventory$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    where?: InventoryTagWhereInput
    orderBy?: InventoryTagOrderByWithRelationInput | InventoryTagOrderByWithRelationInput[]
    cursor?: InventoryTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryTagScalarFieldEnum | InventoryTagScalarFieldEnum[]
  }

  /**
   * Inventory.access
   */
  export type Inventory$accessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    where?: InventoryAccessWhereInput
    orderBy?: InventoryAccessOrderByWithRelationInput | InventoryAccessOrderByWithRelationInput[]
    cursor?: InventoryAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryAccessScalarFieldEnum | InventoryAccessScalarFieldEnum[]
  }

  /**
   * Inventory.comments
   */
  export type Inventory$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Inventory.sequence
   */
  export type Inventory$sequenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    where?: SequenceWhereInput
  }

  /**
   * Inventory without action
   */
  export type InventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
  }


  /**
   * Model InventoryField
   */

  export type AggregateInventoryField = {
    _count: InventoryFieldCountAggregateOutputType | null
    _avg: InventoryFieldAvgAggregateOutputType | null
    _sum: InventoryFieldSumAggregateOutputType | null
    _min: InventoryFieldMinAggregateOutputType | null
    _max: InventoryFieldMaxAggregateOutputType | null
  }

  export type InventoryFieldAvgAggregateOutputType = {
    slot: number | null
    displayOrder: number | null
  }

  export type InventoryFieldSumAggregateOutputType = {
    slot: number | null
    displayOrder: number | null
  }

  export type InventoryFieldMinAggregateOutputType = {
    id: string | null
    inventoryId: string | null
    type: $Enums.FieldType | null
    slot: number | null
    title: string | null
    description: string | null
    showInTable: boolean | null
    displayOrder: number | null
  }

  export type InventoryFieldMaxAggregateOutputType = {
    id: string | null
    inventoryId: string | null
    type: $Enums.FieldType | null
    slot: number | null
    title: string | null
    description: string | null
    showInTable: boolean | null
    displayOrder: number | null
  }

  export type InventoryFieldCountAggregateOutputType = {
    id: number
    inventoryId: number
    type: number
    slot: number
    title: number
    description: number
    showInTable: number
    displayOrder: number
    _all: number
  }


  export type InventoryFieldAvgAggregateInputType = {
    slot?: true
    displayOrder?: true
  }

  export type InventoryFieldSumAggregateInputType = {
    slot?: true
    displayOrder?: true
  }

  export type InventoryFieldMinAggregateInputType = {
    id?: true
    inventoryId?: true
    type?: true
    slot?: true
    title?: true
    description?: true
    showInTable?: true
    displayOrder?: true
  }

  export type InventoryFieldMaxAggregateInputType = {
    id?: true
    inventoryId?: true
    type?: true
    slot?: true
    title?: true
    description?: true
    showInTable?: true
    displayOrder?: true
  }

  export type InventoryFieldCountAggregateInputType = {
    id?: true
    inventoryId?: true
    type?: true
    slot?: true
    title?: true
    description?: true
    showInTable?: true
    displayOrder?: true
    _all?: true
  }

  export type InventoryFieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryField to aggregate.
     */
    where?: InventoryFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryFields to fetch.
     */
    orderBy?: InventoryFieldOrderByWithRelationInput | InventoryFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryFields
    **/
    _count?: true | InventoryFieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryFieldAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryFieldSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryFieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryFieldMaxAggregateInputType
  }

  export type GetInventoryFieldAggregateType<T extends InventoryFieldAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryField]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryField[P]>
      : GetScalarType<T[P], AggregateInventoryField[P]>
  }




  export type InventoryFieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryFieldWhereInput
    orderBy?: InventoryFieldOrderByWithAggregationInput | InventoryFieldOrderByWithAggregationInput[]
    by: InventoryFieldScalarFieldEnum[] | InventoryFieldScalarFieldEnum
    having?: InventoryFieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryFieldCountAggregateInputType | true
    _avg?: InventoryFieldAvgAggregateInputType
    _sum?: InventoryFieldSumAggregateInputType
    _min?: InventoryFieldMinAggregateInputType
    _max?: InventoryFieldMaxAggregateInputType
  }

  export type InventoryFieldGroupByOutputType = {
    id: string
    inventoryId: string
    type: $Enums.FieldType
    slot: number
    title: string
    description: string | null
    showInTable: boolean
    displayOrder: number
    _count: InventoryFieldCountAggregateOutputType | null
    _avg: InventoryFieldAvgAggregateOutputType | null
    _sum: InventoryFieldSumAggregateOutputType | null
    _min: InventoryFieldMinAggregateOutputType | null
    _max: InventoryFieldMaxAggregateOutputType | null
  }

  type GetInventoryFieldGroupByPayload<T extends InventoryFieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryFieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryFieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryFieldGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryFieldGroupByOutputType[P]>
        }
      >
    >


  export type InventoryFieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    type?: boolean
    slot?: boolean
    title?: boolean
    description?: boolean
    showInTable?: boolean
    displayOrder?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryField"]>

  export type InventoryFieldSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    type?: boolean
    slot?: boolean
    title?: boolean
    description?: boolean
    showInTable?: boolean
    displayOrder?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryField"]>

  export type InventoryFieldSelectScalar = {
    id?: boolean
    inventoryId?: boolean
    type?: boolean
    slot?: boolean
    title?: boolean
    description?: boolean
    showInTable?: boolean
    displayOrder?: boolean
  }

  export type InventoryFieldInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type InventoryFieldIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }

  export type $InventoryFieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryField"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      inventoryId: string
      type: $Enums.FieldType
      slot: number
      title: string
      description: string | null
      showInTable: boolean
      displayOrder: number
    }, ExtArgs["result"]["inventoryField"]>
    composites: {}
  }

  type InventoryFieldGetPayload<S extends boolean | null | undefined | InventoryFieldDefaultArgs> = $Result.GetResult<Prisma.$InventoryFieldPayload, S>

  type InventoryFieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryFieldFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryFieldCountAggregateInputType | true
    }

  export interface InventoryFieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryField'], meta: { name: 'InventoryField' } }
    /**
     * Find zero or one InventoryField that matches the filter.
     * @param {InventoryFieldFindUniqueArgs} args - Arguments to find a InventoryField
     * @example
     * // Get one InventoryField
     * const inventoryField = await prisma.inventoryField.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryFieldFindUniqueArgs>(args: SelectSubset<T, InventoryFieldFindUniqueArgs<ExtArgs>>): Prisma__InventoryFieldClient<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryField that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryFieldFindUniqueOrThrowArgs} args - Arguments to find a InventoryField
     * @example
     * // Get one InventoryField
     * const inventoryField = await prisma.inventoryField.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryFieldFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryFieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryFieldClient<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryField that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFieldFindFirstArgs} args - Arguments to find a InventoryField
     * @example
     * // Get one InventoryField
     * const inventoryField = await prisma.inventoryField.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryFieldFindFirstArgs>(args?: SelectSubset<T, InventoryFieldFindFirstArgs<ExtArgs>>): Prisma__InventoryFieldClient<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryField that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFieldFindFirstOrThrowArgs} args - Arguments to find a InventoryField
     * @example
     * // Get one InventoryField
     * const inventoryField = await prisma.inventoryField.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryFieldFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryFieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryFieldClient<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryFields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryFields
     * const inventoryFields = await prisma.inventoryField.findMany()
     * 
     * // Get first 10 InventoryFields
     * const inventoryFields = await prisma.inventoryField.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryFieldWithIdOnly = await prisma.inventoryField.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryFieldFindManyArgs>(args?: SelectSubset<T, InventoryFieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryField.
     * @param {InventoryFieldCreateArgs} args - Arguments to create a InventoryField.
     * @example
     * // Create one InventoryField
     * const InventoryField = await prisma.inventoryField.create({
     *   data: {
     *     // ... data to create a InventoryField
     *   }
     * })
     * 
     */
    create<T extends InventoryFieldCreateArgs>(args: SelectSubset<T, InventoryFieldCreateArgs<ExtArgs>>): Prisma__InventoryFieldClient<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryFields.
     * @param {InventoryFieldCreateManyArgs} args - Arguments to create many InventoryFields.
     * @example
     * // Create many InventoryFields
     * const inventoryField = await prisma.inventoryField.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryFieldCreateManyArgs>(args?: SelectSubset<T, InventoryFieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryFields and returns the data saved in the database.
     * @param {InventoryFieldCreateManyAndReturnArgs} args - Arguments to create many InventoryFields.
     * @example
     * // Create many InventoryFields
     * const inventoryField = await prisma.inventoryField.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryFields and only return the `id`
     * const inventoryFieldWithIdOnly = await prisma.inventoryField.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryFieldCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryFieldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InventoryField.
     * @param {InventoryFieldDeleteArgs} args - Arguments to delete one InventoryField.
     * @example
     * // Delete one InventoryField
     * const InventoryField = await prisma.inventoryField.delete({
     *   where: {
     *     // ... filter to delete one InventoryField
     *   }
     * })
     * 
     */
    delete<T extends InventoryFieldDeleteArgs>(args: SelectSubset<T, InventoryFieldDeleteArgs<ExtArgs>>): Prisma__InventoryFieldClient<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryField.
     * @param {InventoryFieldUpdateArgs} args - Arguments to update one InventoryField.
     * @example
     * // Update one InventoryField
     * const inventoryField = await prisma.inventoryField.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryFieldUpdateArgs>(args: SelectSubset<T, InventoryFieldUpdateArgs<ExtArgs>>): Prisma__InventoryFieldClient<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryFields.
     * @param {InventoryFieldDeleteManyArgs} args - Arguments to filter InventoryFields to delete.
     * @example
     * // Delete a few InventoryFields
     * const { count } = await prisma.inventoryField.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryFieldDeleteManyArgs>(args?: SelectSubset<T, InventoryFieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryFields
     * const inventoryField = await prisma.inventoryField.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryFieldUpdateManyArgs>(args: SelectSubset<T, InventoryFieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryField.
     * @param {InventoryFieldUpsertArgs} args - Arguments to update or create a InventoryField.
     * @example
     * // Update or create a InventoryField
     * const inventoryField = await prisma.inventoryField.upsert({
     *   create: {
     *     // ... data to create a InventoryField
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryField we want to update
     *   }
     * })
     */
    upsert<T extends InventoryFieldUpsertArgs>(args: SelectSubset<T, InventoryFieldUpsertArgs<ExtArgs>>): Prisma__InventoryFieldClient<$Result.GetResult<Prisma.$InventoryFieldPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFieldCountArgs} args - Arguments to filter InventoryFields to count.
     * @example
     * // Count the number of InventoryFields
     * const count = await prisma.inventoryField.count({
     *   where: {
     *     // ... the filter for the InventoryFields we want to count
     *   }
     * })
    **/
    count<T extends InventoryFieldCountArgs>(
      args?: Subset<T, InventoryFieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryFieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryFieldAggregateArgs>(args: Subset<T, InventoryFieldAggregateArgs>): Prisma.PrismaPromise<GetInventoryFieldAggregateType<T>>

    /**
     * Group by InventoryField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryFieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryFieldGroupByArgs['orderBy'] }
        : { orderBy?: InventoryFieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryFieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryField model
   */
  readonly fields: InventoryFieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryField.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryFieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryField model
   */ 
  interface InventoryFieldFieldRefs {
    readonly id: FieldRef<"InventoryField", 'String'>
    readonly inventoryId: FieldRef<"InventoryField", 'String'>
    readonly type: FieldRef<"InventoryField", 'FieldType'>
    readonly slot: FieldRef<"InventoryField", 'Int'>
    readonly title: FieldRef<"InventoryField", 'String'>
    readonly description: FieldRef<"InventoryField", 'String'>
    readonly showInTable: FieldRef<"InventoryField", 'Boolean'>
    readonly displayOrder: FieldRef<"InventoryField", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * InventoryField findUnique
   */
  export type InventoryFieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    /**
     * Filter, which InventoryField to fetch.
     */
    where: InventoryFieldWhereUniqueInput
  }

  /**
   * InventoryField findUniqueOrThrow
   */
  export type InventoryFieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    /**
     * Filter, which InventoryField to fetch.
     */
    where: InventoryFieldWhereUniqueInput
  }

  /**
   * InventoryField findFirst
   */
  export type InventoryFieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    /**
     * Filter, which InventoryField to fetch.
     */
    where?: InventoryFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryFields to fetch.
     */
    orderBy?: InventoryFieldOrderByWithRelationInput | InventoryFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryFields.
     */
    cursor?: InventoryFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryFields.
     */
    distinct?: InventoryFieldScalarFieldEnum | InventoryFieldScalarFieldEnum[]
  }

  /**
   * InventoryField findFirstOrThrow
   */
  export type InventoryFieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    /**
     * Filter, which InventoryField to fetch.
     */
    where?: InventoryFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryFields to fetch.
     */
    orderBy?: InventoryFieldOrderByWithRelationInput | InventoryFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryFields.
     */
    cursor?: InventoryFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryFields.
     */
    distinct?: InventoryFieldScalarFieldEnum | InventoryFieldScalarFieldEnum[]
  }

  /**
   * InventoryField findMany
   */
  export type InventoryFieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    /**
     * Filter, which InventoryFields to fetch.
     */
    where?: InventoryFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryFields to fetch.
     */
    orderBy?: InventoryFieldOrderByWithRelationInput | InventoryFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryFields.
     */
    cursor?: InventoryFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryFields.
     */
    skip?: number
    distinct?: InventoryFieldScalarFieldEnum | InventoryFieldScalarFieldEnum[]
  }

  /**
   * InventoryField create
   */
  export type InventoryFieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryField.
     */
    data: XOR<InventoryFieldCreateInput, InventoryFieldUncheckedCreateInput>
  }

  /**
   * InventoryField createMany
   */
  export type InventoryFieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryFields.
     */
    data: InventoryFieldCreateManyInput | InventoryFieldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryField createManyAndReturn
   */
  export type InventoryFieldCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InventoryFields.
     */
    data: InventoryFieldCreateManyInput | InventoryFieldCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryField update
   */
  export type InventoryFieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryField.
     */
    data: XOR<InventoryFieldUpdateInput, InventoryFieldUncheckedUpdateInput>
    /**
     * Choose, which InventoryField to update.
     */
    where: InventoryFieldWhereUniqueInput
  }

  /**
   * InventoryField updateMany
   */
  export type InventoryFieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryFields.
     */
    data: XOR<InventoryFieldUpdateManyMutationInput, InventoryFieldUncheckedUpdateManyInput>
    /**
     * Filter which InventoryFields to update
     */
    where?: InventoryFieldWhereInput
  }

  /**
   * InventoryField upsert
   */
  export type InventoryFieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryField to update in case it exists.
     */
    where: InventoryFieldWhereUniqueInput
    /**
     * In case the InventoryField found by the `where` argument doesn't exist, create a new InventoryField with this data.
     */
    create: XOR<InventoryFieldCreateInput, InventoryFieldUncheckedCreateInput>
    /**
     * In case the InventoryField was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryFieldUpdateInput, InventoryFieldUncheckedUpdateInput>
  }

  /**
   * InventoryField delete
   */
  export type InventoryFieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
    /**
     * Filter which InventoryField to delete.
     */
    where: InventoryFieldWhereUniqueInput
  }

  /**
   * InventoryField deleteMany
   */
  export type InventoryFieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryFields to delete
     */
    where?: InventoryFieldWhereInput
  }

  /**
   * InventoryField without action
   */
  export type InventoryFieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryField
     */
    select?: InventoryFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryFieldInclude<ExtArgs> | null
  }


  /**
   * Model CustomIdElement
   */

  export type AggregateCustomIdElement = {
    _count: CustomIdElementCountAggregateOutputType | null
    _avg: CustomIdElementAvgAggregateOutputType | null
    _sum: CustomIdElementSumAggregateOutputType | null
    _min: CustomIdElementMinAggregateOutputType | null
    _max: CustomIdElementMaxAggregateOutputType | null
  }

  export type CustomIdElementAvgAggregateOutputType = {
    order: number | null
  }

  export type CustomIdElementSumAggregateOutputType = {
    order: number | null
  }

  export type CustomIdElementMinAggregateOutputType = {
    id: string | null
    inventoryId: string | null
    order: number | null
    type: $Enums.IdElemType | null
    param: string | null
  }

  export type CustomIdElementMaxAggregateOutputType = {
    id: string | null
    inventoryId: string | null
    order: number | null
    type: $Enums.IdElemType | null
    param: string | null
  }

  export type CustomIdElementCountAggregateOutputType = {
    id: number
    inventoryId: number
    order: number
    type: number
    param: number
    _all: number
  }


  export type CustomIdElementAvgAggregateInputType = {
    order?: true
  }

  export type CustomIdElementSumAggregateInputType = {
    order?: true
  }

  export type CustomIdElementMinAggregateInputType = {
    id?: true
    inventoryId?: true
    order?: true
    type?: true
    param?: true
  }

  export type CustomIdElementMaxAggregateInputType = {
    id?: true
    inventoryId?: true
    order?: true
    type?: true
    param?: true
  }

  export type CustomIdElementCountAggregateInputType = {
    id?: true
    inventoryId?: true
    order?: true
    type?: true
    param?: true
    _all?: true
  }

  export type CustomIdElementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomIdElement to aggregate.
     */
    where?: CustomIdElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomIdElements to fetch.
     */
    orderBy?: CustomIdElementOrderByWithRelationInput | CustomIdElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomIdElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomIdElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomIdElements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomIdElements
    **/
    _count?: true | CustomIdElementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomIdElementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomIdElementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomIdElementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomIdElementMaxAggregateInputType
  }

  export type GetCustomIdElementAggregateType<T extends CustomIdElementAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomIdElement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomIdElement[P]>
      : GetScalarType<T[P], AggregateCustomIdElement[P]>
  }




  export type CustomIdElementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomIdElementWhereInput
    orderBy?: CustomIdElementOrderByWithAggregationInput | CustomIdElementOrderByWithAggregationInput[]
    by: CustomIdElementScalarFieldEnum[] | CustomIdElementScalarFieldEnum
    having?: CustomIdElementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomIdElementCountAggregateInputType | true
    _avg?: CustomIdElementAvgAggregateInputType
    _sum?: CustomIdElementSumAggregateInputType
    _min?: CustomIdElementMinAggregateInputType
    _max?: CustomIdElementMaxAggregateInputType
  }

  export type CustomIdElementGroupByOutputType = {
    id: string
    inventoryId: string
    order: number
    type: $Enums.IdElemType
    param: string | null
    _count: CustomIdElementCountAggregateOutputType | null
    _avg: CustomIdElementAvgAggregateOutputType | null
    _sum: CustomIdElementSumAggregateOutputType | null
    _min: CustomIdElementMinAggregateOutputType | null
    _max: CustomIdElementMaxAggregateOutputType | null
  }

  type GetCustomIdElementGroupByPayload<T extends CustomIdElementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomIdElementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomIdElementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomIdElementGroupByOutputType[P]>
            : GetScalarType<T[P], CustomIdElementGroupByOutputType[P]>
        }
      >
    >


  export type CustomIdElementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    order?: boolean
    type?: boolean
    param?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customIdElement"]>

  export type CustomIdElementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    order?: boolean
    type?: boolean
    param?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customIdElement"]>

  export type CustomIdElementSelectScalar = {
    id?: boolean
    inventoryId?: boolean
    order?: boolean
    type?: boolean
    param?: boolean
  }

  export type CustomIdElementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type CustomIdElementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }

  export type $CustomIdElementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomIdElement"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      inventoryId: string
      order: number
      type: $Enums.IdElemType
      param: string | null
    }, ExtArgs["result"]["customIdElement"]>
    composites: {}
  }

  type CustomIdElementGetPayload<S extends boolean | null | undefined | CustomIdElementDefaultArgs> = $Result.GetResult<Prisma.$CustomIdElementPayload, S>

  type CustomIdElementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomIdElementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomIdElementCountAggregateInputType | true
    }

  export interface CustomIdElementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomIdElement'], meta: { name: 'CustomIdElement' } }
    /**
     * Find zero or one CustomIdElement that matches the filter.
     * @param {CustomIdElementFindUniqueArgs} args - Arguments to find a CustomIdElement
     * @example
     * // Get one CustomIdElement
     * const customIdElement = await prisma.customIdElement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomIdElementFindUniqueArgs>(args: SelectSubset<T, CustomIdElementFindUniqueArgs<ExtArgs>>): Prisma__CustomIdElementClient<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CustomIdElement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomIdElementFindUniqueOrThrowArgs} args - Arguments to find a CustomIdElement
     * @example
     * // Get one CustomIdElement
     * const customIdElement = await prisma.customIdElement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomIdElementFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomIdElementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomIdElementClient<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CustomIdElement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomIdElementFindFirstArgs} args - Arguments to find a CustomIdElement
     * @example
     * // Get one CustomIdElement
     * const customIdElement = await prisma.customIdElement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomIdElementFindFirstArgs>(args?: SelectSubset<T, CustomIdElementFindFirstArgs<ExtArgs>>): Prisma__CustomIdElementClient<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CustomIdElement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomIdElementFindFirstOrThrowArgs} args - Arguments to find a CustomIdElement
     * @example
     * // Get one CustomIdElement
     * const customIdElement = await prisma.customIdElement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomIdElementFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomIdElementFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomIdElementClient<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CustomIdElements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomIdElementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomIdElements
     * const customIdElements = await prisma.customIdElement.findMany()
     * 
     * // Get first 10 CustomIdElements
     * const customIdElements = await prisma.customIdElement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customIdElementWithIdOnly = await prisma.customIdElement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomIdElementFindManyArgs>(args?: SelectSubset<T, CustomIdElementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CustomIdElement.
     * @param {CustomIdElementCreateArgs} args - Arguments to create a CustomIdElement.
     * @example
     * // Create one CustomIdElement
     * const CustomIdElement = await prisma.customIdElement.create({
     *   data: {
     *     // ... data to create a CustomIdElement
     *   }
     * })
     * 
     */
    create<T extends CustomIdElementCreateArgs>(args: SelectSubset<T, CustomIdElementCreateArgs<ExtArgs>>): Prisma__CustomIdElementClient<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CustomIdElements.
     * @param {CustomIdElementCreateManyArgs} args - Arguments to create many CustomIdElements.
     * @example
     * // Create many CustomIdElements
     * const customIdElement = await prisma.customIdElement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomIdElementCreateManyArgs>(args?: SelectSubset<T, CustomIdElementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomIdElements and returns the data saved in the database.
     * @param {CustomIdElementCreateManyAndReturnArgs} args - Arguments to create many CustomIdElements.
     * @example
     * // Create many CustomIdElements
     * const customIdElement = await prisma.customIdElement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomIdElements and only return the `id`
     * const customIdElementWithIdOnly = await prisma.customIdElement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomIdElementCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomIdElementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CustomIdElement.
     * @param {CustomIdElementDeleteArgs} args - Arguments to delete one CustomIdElement.
     * @example
     * // Delete one CustomIdElement
     * const CustomIdElement = await prisma.customIdElement.delete({
     *   where: {
     *     // ... filter to delete one CustomIdElement
     *   }
     * })
     * 
     */
    delete<T extends CustomIdElementDeleteArgs>(args: SelectSubset<T, CustomIdElementDeleteArgs<ExtArgs>>): Prisma__CustomIdElementClient<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CustomIdElement.
     * @param {CustomIdElementUpdateArgs} args - Arguments to update one CustomIdElement.
     * @example
     * // Update one CustomIdElement
     * const customIdElement = await prisma.customIdElement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomIdElementUpdateArgs>(args: SelectSubset<T, CustomIdElementUpdateArgs<ExtArgs>>): Prisma__CustomIdElementClient<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CustomIdElements.
     * @param {CustomIdElementDeleteManyArgs} args - Arguments to filter CustomIdElements to delete.
     * @example
     * // Delete a few CustomIdElements
     * const { count } = await prisma.customIdElement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomIdElementDeleteManyArgs>(args?: SelectSubset<T, CustomIdElementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomIdElements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomIdElementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomIdElements
     * const customIdElement = await prisma.customIdElement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomIdElementUpdateManyArgs>(args: SelectSubset<T, CustomIdElementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomIdElement.
     * @param {CustomIdElementUpsertArgs} args - Arguments to update or create a CustomIdElement.
     * @example
     * // Update or create a CustomIdElement
     * const customIdElement = await prisma.customIdElement.upsert({
     *   create: {
     *     // ... data to create a CustomIdElement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomIdElement we want to update
     *   }
     * })
     */
    upsert<T extends CustomIdElementUpsertArgs>(args: SelectSubset<T, CustomIdElementUpsertArgs<ExtArgs>>): Prisma__CustomIdElementClient<$Result.GetResult<Prisma.$CustomIdElementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CustomIdElements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomIdElementCountArgs} args - Arguments to filter CustomIdElements to count.
     * @example
     * // Count the number of CustomIdElements
     * const count = await prisma.customIdElement.count({
     *   where: {
     *     // ... the filter for the CustomIdElements we want to count
     *   }
     * })
    **/
    count<T extends CustomIdElementCountArgs>(
      args?: Subset<T, CustomIdElementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomIdElementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomIdElement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomIdElementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomIdElementAggregateArgs>(args: Subset<T, CustomIdElementAggregateArgs>): Prisma.PrismaPromise<GetCustomIdElementAggregateType<T>>

    /**
     * Group by CustomIdElement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomIdElementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomIdElementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomIdElementGroupByArgs['orderBy'] }
        : { orderBy?: CustomIdElementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomIdElementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomIdElementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomIdElement model
   */
  readonly fields: CustomIdElementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomIdElement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomIdElementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomIdElement model
   */ 
  interface CustomIdElementFieldRefs {
    readonly id: FieldRef<"CustomIdElement", 'String'>
    readonly inventoryId: FieldRef<"CustomIdElement", 'String'>
    readonly order: FieldRef<"CustomIdElement", 'Int'>
    readonly type: FieldRef<"CustomIdElement", 'IdElemType'>
    readonly param: FieldRef<"CustomIdElement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CustomIdElement findUnique
   */
  export type CustomIdElementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    /**
     * Filter, which CustomIdElement to fetch.
     */
    where: CustomIdElementWhereUniqueInput
  }

  /**
   * CustomIdElement findUniqueOrThrow
   */
  export type CustomIdElementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    /**
     * Filter, which CustomIdElement to fetch.
     */
    where: CustomIdElementWhereUniqueInput
  }

  /**
   * CustomIdElement findFirst
   */
  export type CustomIdElementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    /**
     * Filter, which CustomIdElement to fetch.
     */
    where?: CustomIdElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomIdElements to fetch.
     */
    orderBy?: CustomIdElementOrderByWithRelationInput | CustomIdElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomIdElements.
     */
    cursor?: CustomIdElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomIdElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomIdElements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomIdElements.
     */
    distinct?: CustomIdElementScalarFieldEnum | CustomIdElementScalarFieldEnum[]
  }

  /**
   * CustomIdElement findFirstOrThrow
   */
  export type CustomIdElementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    /**
     * Filter, which CustomIdElement to fetch.
     */
    where?: CustomIdElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomIdElements to fetch.
     */
    orderBy?: CustomIdElementOrderByWithRelationInput | CustomIdElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomIdElements.
     */
    cursor?: CustomIdElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomIdElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomIdElements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomIdElements.
     */
    distinct?: CustomIdElementScalarFieldEnum | CustomIdElementScalarFieldEnum[]
  }

  /**
   * CustomIdElement findMany
   */
  export type CustomIdElementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    /**
     * Filter, which CustomIdElements to fetch.
     */
    where?: CustomIdElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomIdElements to fetch.
     */
    orderBy?: CustomIdElementOrderByWithRelationInput | CustomIdElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomIdElements.
     */
    cursor?: CustomIdElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomIdElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomIdElements.
     */
    skip?: number
    distinct?: CustomIdElementScalarFieldEnum | CustomIdElementScalarFieldEnum[]
  }

  /**
   * CustomIdElement create
   */
  export type CustomIdElementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomIdElement.
     */
    data: XOR<CustomIdElementCreateInput, CustomIdElementUncheckedCreateInput>
  }

  /**
   * CustomIdElement createMany
   */
  export type CustomIdElementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomIdElements.
     */
    data: CustomIdElementCreateManyInput | CustomIdElementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomIdElement createManyAndReturn
   */
  export type CustomIdElementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CustomIdElements.
     */
    data: CustomIdElementCreateManyInput | CustomIdElementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomIdElement update
   */
  export type CustomIdElementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomIdElement.
     */
    data: XOR<CustomIdElementUpdateInput, CustomIdElementUncheckedUpdateInput>
    /**
     * Choose, which CustomIdElement to update.
     */
    where: CustomIdElementWhereUniqueInput
  }

  /**
   * CustomIdElement updateMany
   */
  export type CustomIdElementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomIdElements.
     */
    data: XOR<CustomIdElementUpdateManyMutationInput, CustomIdElementUncheckedUpdateManyInput>
    /**
     * Filter which CustomIdElements to update
     */
    where?: CustomIdElementWhereInput
  }

  /**
   * CustomIdElement upsert
   */
  export type CustomIdElementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomIdElement to update in case it exists.
     */
    where: CustomIdElementWhereUniqueInput
    /**
     * In case the CustomIdElement found by the `where` argument doesn't exist, create a new CustomIdElement with this data.
     */
    create: XOR<CustomIdElementCreateInput, CustomIdElementUncheckedCreateInput>
    /**
     * In case the CustomIdElement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomIdElementUpdateInput, CustomIdElementUncheckedUpdateInput>
  }

  /**
   * CustomIdElement delete
   */
  export type CustomIdElementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
    /**
     * Filter which CustomIdElement to delete.
     */
    where: CustomIdElementWhereUniqueInput
  }

  /**
   * CustomIdElement deleteMany
   */
  export type CustomIdElementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomIdElements to delete
     */
    where?: CustomIdElementWhereInput
  }

  /**
   * CustomIdElement without action
   */
  export type CustomIdElementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomIdElement
     */
    select?: CustomIdElementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomIdElementInclude<ExtArgs> | null
  }


  /**
   * Model Sequence
   */

  export type AggregateSequence = {
    _count: SequenceCountAggregateOutputType | null
    _avg: SequenceAvgAggregateOutputType | null
    _sum: SequenceSumAggregateOutputType | null
    _min: SequenceMinAggregateOutputType | null
    _max: SequenceMaxAggregateOutputType | null
  }

  export type SequenceAvgAggregateOutputType = {
    value: number | null
  }

  export type SequenceSumAggregateOutputType = {
    value: number | null
  }

  export type SequenceMinAggregateOutputType = {
    inventoryId: string | null
    value: number | null
  }

  export type SequenceMaxAggregateOutputType = {
    inventoryId: string | null
    value: number | null
  }

  export type SequenceCountAggregateOutputType = {
    inventoryId: number
    value: number
    _all: number
  }


  export type SequenceAvgAggregateInputType = {
    value?: true
  }

  export type SequenceSumAggregateInputType = {
    value?: true
  }

  export type SequenceMinAggregateInputType = {
    inventoryId?: true
    value?: true
  }

  export type SequenceMaxAggregateInputType = {
    inventoryId?: true
    value?: true
  }

  export type SequenceCountAggregateInputType = {
    inventoryId?: true
    value?: true
    _all?: true
  }

  export type SequenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sequence to aggregate.
     */
    where?: SequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sequences to fetch.
     */
    orderBy?: SequenceOrderByWithRelationInput | SequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sequences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sequences
    **/
    _count?: true | SequenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SequenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SequenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SequenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SequenceMaxAggregateInputType
  }

  export type GetSequenceAggregateType<T extends SequenceAggregateArgs> = {
        [P in keyof T & keyof AggregateSequence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSequence[P]>
      : GetScalarType<T[P], AggregateSequence[P]>
  }




  export type SequenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SequenceWhereInput
    orderBy?: SequenceOrderByWithAggregationInput | SequenceOrderByWithAggregationInput[]
    by: SequenceScalarFieldEnum[] | SequenceScalarFieldEnum
    having?: SequenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SequenceCountAggregateInputType | true
    _avg?: SequenceAvgAggregateInputType
    _sum?: SequenceSumAggregateInputType
    _min?: SequenceMinAggregateInputType
    _max?: SequenceMaxAggregateInputType
  }

  export type SequenceGroupByOutputType = {
    inventoryId: string
    value: number
    _count: SequenceCountAggregateOutputType | null
    _avg: SequenceAvgAggregateOutputType | null
    _sum: SequenceSumAggregateOutputType | null
    _min: SequenceMinAggregateOutputType | null
    _max: SequenceMaxAggregateOutputType | null
  }

  type GetSequenceGroupByPayload<T extends SequenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SequenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SequenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SequenceGroupByOutputType[P]>
            : GetScalarType<T[P], SequenceGroupByOutputType[P]>
        }
      >
    >


  export type SequenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inventoryId?: boolean
    value?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sequence"]>

  export type SequenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inventoryId?: boolean
    value?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sequence"]>

  export type SequenceSelectScalar = {
    inventoryId?: boolean
    value?: boolean
  }

  export type SequenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type SequenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }

  export type $SequencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sequence"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      inventoryId: string
      value: number
    }, ExtArgs["result"]["sequence"]>
    composites: {}
  }

  type SequenceGetPayload<S extends boolean | null | undefined | SequenceDefaultArgs> = $Result.GetResult<Prisma.$SequencePayload, S>

  type SequenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SequenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SequenceCountAggregateInputType | true
    }

  export interface SequenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sequence'], meta: { name: 'Sequence' } }
    /**
     * Find zero or one Sequence that matches the filter.
     * @param {SequenceFindUniqueArgs} args - Arguments to find a Sequence
     * @example
     * // Get one Sequence
     * const sequence = await prisma.sequence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SequenceFindUniqueArgs>(args: SelectSubset<T, SequenceFindUniqueArgs<ExtArgs>>): Prisma__SequenceClient<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Sequence that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SequenceFindUniqueOrThrowArgs} args - Arguments to find a Sequence
     * @example
     * // Get one Sequence
     * const sequence = await prisma.sequence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SequenceFindUniqueOrThrowArgs>(args: SelectSubset<T, SequenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SequenceClient<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Sequence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceFindFirstArgs} args - Arguments to find a Sequence
     * @example
     * // Get one Sequence
     * const sequence = await prisma.sequence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SequenceFindFirstArgs>(args?: SelectSubset<T, SequenceFindFirstArgs<ExtArgs>>): Prisma__SequenceClient<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Sequence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceFindFirstOrThrowArgs} args - Arguments to find a Sequence
     * @example
     * // Get one Sequence
     * const sequence = await prisma.sequence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SequenceFindFirstOrThrowArgs>(args?: SelectSubset<T, SequenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__SequenceClient<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sequences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sequences
     * const sequences = await prisma.sequence.findMany()
     * 
     * // Get first 10 Sequences
     * const sequences = await prisma.sequence.findMany({ take: 10 })
     * 
     * // Only select the `inventoryId`
     * const sequenceWithInventoryIdOnly = await prisma.sequence.findMany({ select: { inventoryId: true } })
     * 
     */
    findMany<T extends SequenceFindManyArgs>(args?: SelectSubset<T, SequenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Sequence.
     * @param {SequenceCreateArgs} args - Arguments to create a Sequence.
     * @example
     * // Create one Sequence
     * const Sequence = await prisma.sequence.create({
     *   data: {
     *     // ... data to create a Sequence
     *   }
     * })
     * 
     */
    create<T extends SequenceCreateArgs>(args: SelectSubset<T, SequenceCreateArgs<ExtArgs>>): Prisma__SequenceClient<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sequences.
     * @param {SequenceCreateManyArgs} args - Arguments to create many Sequences.
     * @example
     * // Create many Sequences
     * const sequence = await prisma.sequence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SequenceCreateManyArgs>(args?: SelectSubset<T, SequenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sequences and returns the data saved in the database.
     * @param {SequenceCreateManyAndReturnArgs} args - Arguments to create many Sequences.
     * @example
     * // Create many Sequences
     * const sequence = await prisma.sequence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sequences and only return the `inventoryId`
     * const sequenceWithInventoryIdOnly = await prisma.sequence.createManyAndReturn({ 
     *   select: { inventoryId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SequenceCreateManyAndReturnArgs>(args?: SelectSubset<T, SequenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Sequence.
     * @param {SequenceDeleteArgs} args - Arguments to delete one Sequence.
     * @example
     * // Delete one Sequence
     * const Sequence = await prisma.sequence.delete({
     *   where: {
     *     // ... filter to delete one Sequence
     *   }
     * })
     * 
     */
    delete<T extends SequenceDeleteArgs>(args: SelectSubset<T, SequenceDeleteArgs<ExtArgs>>): Prisma__SequenceClient<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Sequence.
     * @param {SequenceUpdateArgs} args - Arguments to update one Sequence.
     * @example
     * // Update one Sequence
     * const sequence = await prisma.sequence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SequenceUpdateArgs>(args: SelectSubset<T, SequenceUpdateArgs<ExtArgs>>): Prisma__SequenceClient<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sequences.
     * @param {SequenceDeleteManyArgs} args - Arguments to filter Sequences to delete.
     * @example
     * // Delete a few Sequences
     * const { count } = await prisma.sequence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SequenceDeleteManyArgs>(args?: SelectSubset<T, SequenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sequences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sequences
     * const sequence = await prisma.sequence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SequenceUpdateManyArgs>(args: SelectSubset<T, SequenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sequence.
     * @param {SequenceUpsertArgs} args - Arguments to update or create a Sequence.
     * @example
     * // Update or create a Sequence
     * const sequence = await prisma.sequence.upsert({
     *   create: {
     *     // ... data to create a Sequence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sequence we want to update
     *   }
     * })
     */
    upsert<T extends SequenceUpsertArgs>(args: SelectSubset<T, SequenceUpsertArgs<ExtArgs>>): Prisma__SequenceClient<$Result.GetResult<Prisma.$SequencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sequences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceCountArgs} args - Arguments to filter Sequences to count.
     * @example
     * // Count the number of Sequences
     * const count = await prisma.sequence.count({
     *   where: {
     *     // ... the filter for the Sequences we want to count
     *   }
     * })
    **/
    count<T extends SequenceCountArgs>(
      args?: Subset<T, SequenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SequenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sequence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SequenceAggregateArgs>(args: Subset<T, SequenceAggregateArgs>): Prisma.PrismaPromise<GetSequenceAggregateType<T>>

    /**
     * Group by Sequence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SequenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SequenceGroupByArgs['orderBy'] }
        : { orderBy?: SequenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SequenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSequenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sequence model
   */
  readonly fields: SequenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sequence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SequenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sequence model
   */ 
  interface SequenceFieldRefs {
    readonly inventoryId: FieldRef<"Sequence", 'String'>
    readonly value: FieldRef<"Sequence", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Sequence findUnique
   */
  export type SequenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    /**
     * Filter, which Sequence to fetch.
     */
    where: SequenceWhereUniqueInput
  }

  /**
   * Sequence findUniqueOrThrow
   */
  export type SequenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    /**
     * Filter, which Sequence to fetch.
     */
    where: SequenceWhereUniqueInput
  }

  /**
   * Sequence findFirst
   */
  export type SequenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    /**
     * Filter, which Sequence to fetch.
     */
    where?: SequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sequences to fetch.
     */
    orderBy?: SequenceOrderByWithRelationInput | SequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sequences.
     */
    cursor?: SequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sequences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sequences.
     */
    distinct?: SequenceScalarFieldEnum | SequenceScalarFieldEnum[]
  }

  /**
   * Sequence findFirstOrThrow
   */
  export type SequenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    /**
     * Filter, which Sequence to fetch.
     */
    where?: SequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sequences to fetch.
     */
    orderBy?: SequenceOrderByWithRelationInput | SequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sequences.
     */
    cursor?: SequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sequences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sequences.
     */
    distinct?: SequenceScalarFieldEnum | SequenceScalarFieldEnum[]
  }

  /**
   * Sequence findMany
   */
  export type SequenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    /**
     * Filter, which Sequences to fetch.
     */
    where?: SequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sequences to fetch.
     */
    orderBy?: SequenceOrderByWithRelationInput | SequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sequences.
     */
    cursor?: SequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sequences.
     */
    skip?: number
    distinct?: SequenceScalarFieldEnum | SequenceScalarFieldEnum[]
  }

  /**
   * Sequence create
   */
  export type SequenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Sequence.
     */
    data: XOR<SequenceCreateInput, SequenceUncheckedCreateInput>
  }

  /**
   * Sequence createMany
   */
  export type SequenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sequences.
     */
    data: SequenceCreateManyInput | SequenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sequence createManyAndReturn
   */
  export type SequenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sequences.
     */
    data: SequenceCreateManyInput | SequenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sequence update
   */
  export type SequenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Sequence.
     */
    data: XOR<SequenceUpdateInput, SequenceUncheckedUpdateInput>
    /**
     * Choose, which Sequence to update.
     */
    where: SequenceWhereUniqueInput
  }

  /**
   * Sequence updateMany
   */
  export type SequenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sequences.
     */
    data: XOR<SequenceUpdateManyMutationInput, SequenceUncheckedUpdateManyInput>
    /**
     * Filter which Sequences to update
     */
    where?: SequenceWhereInput
  }

  /**
   * Sequence upsert
   */
  export type SequenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Sequence to update in case it exists.
     */
    where: SequenceWhereUniqueInput
    /**
     * In case the Sequence found by the `where` argument doesn't exist, create a new Sequence with this data.
     */
    create: XOR<SequenceCreateInput, SequenceUncheckedCreateInput>
    /**
     * In case the Sequence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SequenceUpdateInput, SequenceUncheckedUpdateInput>
  }

  /**
   * Sequence delete
   */
  export type SequenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
    /**
     * Filter which Sequence to delete.
     */
    where: SequenceWhereUniqueInput
  }

  /**
   * Sequence deleteMany
   */
  export type SequenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sequences to delete
     */
    where?: SequenceWhereInput
  }

  /**
   * Sequence without action
   */
  export type SequenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sequence
     */
    select?: SequenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    version: number | null
    num1: number | null
    num2: number | null
    num3: number | null
  }

  export type ItemSumAggregateOutputType = {
    version: number | null
    num1: number | null
    num2: number | null
    num3: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: string | null
    inventoryId: string | null
    customId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    version: number | null
    text1: string | null
    text2: string | null
    text3: string | null
    mtext1: string | null
    mtext2: string | null
    mtext3: string | null
    num1: number | null
    num2: number | null
    num3: number | null
    link1: string | null
    link2: string | null
    link3: string | null
    bool1: boolean | null
    bool2: boolean | null
    bool3: boolean | null
    img1: string | null
    img2: string | null
    img3: string | null
  }

  export type ItemMaxAggregateOutputType = {
    id: string | null
    inventoryId: string | null
    customId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    version: number | null
    text1: string | null
    text2: string | null
    text3: string | null
    mtext1: string | null
    mtext2: string | null
    mtext3: string | null
    num1: number | null
    num2: number | null
    num3: number | null
    link1: string | null
    link2: string | null
    link3: string | null
    bool1: boolean | null
    bool2: boolean | null
    bool3: boolean | null
    img1: string | null
    img2: string | null
    img3: string | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    inventoryId: number
    customId: number
    createdById: number
    createdAt: number
    updatedAt: number
    version: number
    text1: number
    text2: number
    text3: number
    mtext1: number
    mtext2: number
    mtext3: number
    num1: number
    num2: number
    num3: number
    link1: number
    link2: number
    link3: number
    bool1: number
    bool2: number
    bool3: number
    img1: number
    img2: number
    img3: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    version?: true
    num1?: true
    num2?: true
    num3?: true
  }

  export type ItemSumAggregateInputType = {
    version?: true
    num1?: true
    num2?: true
    num3?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    inventoryId?: true
    customId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    version?: true
    text1?: true
    text2?: true
    text3?: true
    mtext1?: true
    mtext2?: true
    mtext3?: true
    num1?: true
    num2?: true
    num3?: true
    link1?: true
    link2?: true
    link3?: true
    bool1?: true
    bool2?: true
    bool3?: true
    img1?: true
    img2?: true
    img3?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    inventoryId?: true
    customId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    version?: true
    text1?: true
    text2?: true
    text3?: true
    mtext1?: true
    mtext2?: true
    mtext3?: true
    num1?: true
    num2?: true
    num3?: true
    link1?: true
    link2?: true
    link3?: true
    bool1?: true
    bool2?: true
    bool3?: true
    img1?: true
    img2?: true
    img3?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    inventoryId?: true
    customId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    version?: true
    text1?: true
    text2?: true
    text3?: true
    mtext1?: true
    mtext2?: true
    mtext3?: true
    num1?: true
    num2?: true
    num3?: true
    link1?: true
    link2?: true
    link3?: true
    bool1?: true
    bool2?: true
    bool3?: true
    img1?: true
    img2?: true
    img3?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: string
    inventoryId: string
    customId: string
    createdById: string
    createdAt: Date
    updatedAt: Date
    version: number
    text1: string | null
    text2: string | null
    text3: string | null
    mtext1: string | null
    mtext2: string | null
    mtext3: string | null
    num1: number | null
    num2: number | null
    num3: number | null
    link1: string | null
    link2: string | null
    link3: string | null
    bool1: boolean | null
    bool2: boolean | null
    bool3: boolean | null
    img1: string | null
    img2: string | null
    img3: string | null
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    customId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    version?: boolean
    text1?: boolean
    text2?: boolean
    text3?: boolean
    mtext1?: boolean
    mtext2?: boolean
    mtext3?: boolean
    num1?: boolean
    num2?: boolean
    num3?: boolean
    link1?: boolean
    link2?: boolean
    link3?: boolean
    bool1?: boolean
    bool2?: boolean
    bool3?: boolean
    img1?: boolean
    img2?: boolean
    img3?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Item$commentsArgs<ExtArgs>
    likes?: boolean | Item$likesArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    customId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    version?: boolean
    text1?: boolean
    text2?: boolean
    text3?: boolean
    mtext1?: boolean
    mtext2?: boolean
    mtext3?: boolean
    num1?: boolean
    num2?: boolean
    num3?: boolean
    link1?: boolean
    link2?: boolean
    link3?: boolean
    bool1?: boolean
    bool2?: boolean
    bool3?: boolean
    img1?: boolean
    img2?: boolean
    img3?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectScalar = {
    id?: boolean
    inventoryId?: boolean
    customId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    version?: boolean
    text1?: boolean
    text2?: boolean
    text3?: boolean
    mtext1?: boolean
    mtext2?: boolean
    mtext3?: boolean
    num1?: boolean
    num2?: boolean
    num3?: boolean
    link1?: boolean
    link2?: boolean
    link3?: boolean
    bool1?: boolean
    bool2?: boolean
    bool3?: boolean
    img1?: boolean
    img2?: boolean
    img3?: boolean
  }

  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Item$commentsArgs<ExtArgs>
    likes?: boolean | Item$likesArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      inventoryId: string
      customId: string
      createdById: string
      createdAt: Date
      updatedAt: Date
      version: number
      text1: string | null
      text2: string | null
      text3: string | null
      mtext1: string | null
      mtext2: string | null
      mtext3: string | null
      num1: number | null
      num2: number | null
      num3: number | null
      link1: string | null
      link2: string | null
      link3: string | null
      bool1: boolean | null
      bool2: boolean | null
      bool3: boolean | null
      img1: string | null
      img2: string | null
      img3: string | null
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Items and returns the data saved in the database.
     * @param {ItemCreateManyAndReturnArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Items and only return the `id`
     * const itemWithIdOnly = await prisma.item.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends Item$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Item$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends Item$likesArgs<ExtArgs> = {}>(args?: Subset<T, Item$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */ 
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'String'>
    readonly inventoryId: FieldRef<"Item", 'String'>
    readonly customId: FieldRef<"Item", 'String'>
    readonly createdById: FieldRef<"Item", 'String'>
    readonly createdAt: FieldRef<"Item", 'DateTime'>
    readonly updatedAt: FieldRef<"Item", 'DateTime'>
    readonly version: FieldRef<"Item", 'Int'>
    readonly text1: FieldRef<"Item", 'String'>
    readonly text2: FieldRef<"Item", 'String'>
    readonly text3: FieldRef<"Item", 'String'>
    readonly mtext1: FieldRef<"Item", 'String'>
    readonly mtext2: FieldRef<"Item", 'String'>
    readonly mtext3: FieldRef<"Item", 'String'>
    readonly num1: FieldRef<"Item", 'Float'>
    readonly num2: FieldRef<"Item", 'Float'>
    readonly num3: FieldRef<"Item", 'Float'>
    readonly link1: FieldRef<"Item", 'String'>
    readonly link2: FieldRef<"Item", 'String'>
    readonly link3: FieldRef<"Item", 'String'>
    readonly bool1: FieldRef<"Item", 'Boolean'>
    readonly bool2: FieldRef<"Item", 'Boolean'>
    readonly bool3: FieldRef<"Item", 'Boolean'>
    readonly img1: FieldRef<"Item", 'String'>
    readonly img2: FieldRef<"Item", 'String'>
    readonly img3: FieldRef<"Item", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Item createManyAndReturn
   */
  export type ItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
  }

  /**
   * Item.comments
   */
  export type Item$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Item.likes
   */
  export type Item$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    inventoryId: string | null
    itemId: string | null
    userId: string | null
    body: string | null
    createdAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    inventoryId: string | null
    itemId: string | null
    userId: string | null
    body: string | null
    createdAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    inventoryId: number
    itemId: number
    userId: number
    body: number
    createdAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    inventoryId?: true
    itemId?: true
    userId?: true
    body?: true
    createdAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    inventoryId?: true
    itemId?: true
    userId?: true
    body?: true
    createdAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    inventoryId?: true
    itemId?: true
    userId?: true
    body?: true
    createdAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    inventoryId: string
    itemId: string | null
    userId: string
    body: string
    createdAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    itemId?: boolean
    userId?: boolean
    body?: boolean
    createdAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | Comment$itemArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    itemId?: boolean
    userId?: boolean
    body?: boolean
    createdAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | Comment$itemArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    inventoryId?: boolean
    itemId?: boolean
    userId?: boolean
    body?: boolean
    createdAt?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | Comment$itemArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    item?: boolean | Comment$itemArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      inventoryId: string
      itemId: string | null
      userId: string
      body: string
      createdAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends Comment$itemArgs<ExtArgs> = {}>(args?: Subset<T, Comment$itemArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly inventoryId: FieldRef<"Comment", 'String'>
    readonly itemId: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly body: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.item
   */
  export type Comment$itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number | null
  }

  export type TagSumAggregateOutputType = {
    id: number | null
  }

  export type TagMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: number
    name: string
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    inventories?: boolean | Tag$inventoriesArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventories?: boolean | Tag$inventoriesArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      inventories: Prisma.$InventoryTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventories<T extends Tag$inventoriesArgs<ExtArgs> = {}>(args?: Subset<T, Tag$inventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'Int'>
    readonly name: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.inventories
   */
  export type Tag$inventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    where?: InventoryTagWhereInput
    orderBy?: InventoryTagOrderByWithRelationInput | InventoryTagOrderByWithRelationInput[]
    cursor?: InventoryTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryTagScalarFieldEnum | InventoryTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model InventoryTag
   */

  export type AggregateInventoryTag = {
    _count: InventoryTagCountAggregateOutputType | null
    _avg: InventoryTagAvgAggregateOutputType | null
    _sum: InventoryTagSumAggregateOutputType | null
    _min: InventoryTagMinAggregateOutputType | null
    _max: InventoryTagMaxAggregateOutputType | null
  }

  export type InventoryTagAvgAggregateOutputType = {
    tagId: number | null
  }

  export type InventoryTagSumAggregateOutputType = {
    tagId: number | null
  }

  export type InventoryTagMinAggregateOutputType = {
    inventoryId: string | null
    tagId: number | null
  }

  export type InventoryTagMaxAggregateOutputType = {
    inventoryId: string | null
    tagId: number | null
  }

  export type InventoryTagCountAggregateOutputType = {
    inventoryId: number
    tagId: number
    _all: number
  }


  export type InventoryTagAvgAggregateInputType = {
    tagId?: true
  }

  export type InventoryTagSumAggregateInputType = {
    tagId?: true
  }

  export type InventoryTagMinAggregateInputType = {
    inventoryId?: true
    tagId?: true
  }

  export type InventoryTagMaxAggregateInputType = {
    inventoryId?: true
    tagId?: true
  }

  export type InventoryTagCountAggregateInputType = {
    inventoryId?: true
    tagId?: true
    _all?: true
  }

  export type InventoryTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryTag to aggregate.
     */
    where?: InventoryTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryTags to fetch.
     */
    orderBy?: InventoryTagOrderByWithRelationInput | InventoryTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryTags
    **/
    _count?: true | InventoryTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryTagMaxAggregateInputType
  }

  export type GetInventoryTagAggregateType<T extends InventoryTagAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryTag[P]>
      : GetScalarType<T[P], AggregateInventoryTag[P]>
  }




  export type InventoryTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryTagWhereInput
    orderBy?: InventoryTagOrderByWithAggregationInput | InventoryTagOrderByWithAggregationInput[]
    by: InventoryTagScalarFieldEnum[] | InventoryTagScalarFieldEnum
    having?: InventoryTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryTagCountAggregateInputType | true
    _avg?: InventoryTagAvgAggregateInputType
    _sum?: InventoryTagSumAggregateInputType
    _min?: InventoryTagMinAggregateInputType
    _max?: InventoryTagMaxAggregateInputType
  }

  export type InventoryTagGroupByOutputType = {
    inventoryId: string
    tagId: number
    _count: InventoryTagCountAggregateOutputType | null
    _avg: InventoryTagAvgAggregateOutputType | null
    _sum: InventoryTagSumAggregateOutputType | null
    _min: InventoryTagMinAggregateOutputType | null
    _max: InventoryTagMaxAggregateOutputType | null
  }

  type GetInventoryTagGroupByPayload<T extends InventoryTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryTagGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryTagGroupByOutputType[P]>
        }
      >
    >


  export type InventoryTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inventoryId?: boolean
    tagId?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryTag"]>

  export type InventoryTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inventoryId?: boolean
    tagId?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryTag"]>

  export type InventoryTagSelectScalar = {
    inventoryId?: boolean
    tagId?: boolean
  }

  export type InventoryTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type InventoryTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $InventoryTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryTag"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      inventoryId: string
      tagId: number
    }, ExtArgs["result"]["inventoryTag"]>
    composites: {}
  }

  type InventoryTagGetPayload<S extends boolean | null | undefined | InventoryTagDefaultArgs> = $Result.GetResult<Prisma.$InventoryTagPayload, S>

  type InventoryTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryTagCountAggregateInputType | true
    }

  export interface InventoryTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryTag'], meta: { name: 'InventoryTag' } }
    /**
     * Find zero or one InventoryTag that matches the filter.
     * @param {InventoryTagFindUniqueArgs} args - Arguments to find a InventoryTag
     * @example
     * // Get one InventoryTag
     * const inventoryTag = await prisma.inventoryTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryTagFindUniqueArgs>(args: SelectSubset<T, InventoryTagFindUniqueArgs<ExtArgs>>): Prisma__InventoryTagClient<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryTagFindUniqueOrThrowArgs} args - Arguments to find a InventoryTag
     * @example
     * // Get one InventoryTag
     * const inventoryTag = await prisma.inventoryTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryTagFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryTagClient<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTagFindFirstArgs} args - Arguments to find a InventoryTag
     * @example
     * // Get one InventoryTag
     * const inventoryTag = await prisma.inventoryTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryTagFindFirstArgs>(args?: SelectSubset<T, InventoryTagFindFirstArgs<ExtArgs>>): Prisma__InventoryTagClient<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTagFindFirstOrThrowArgs} args - Arguments to find a InventoryTag
     * @example
     * // Get one InventoryTag
     * const inventoryTag = await prisma.inventoryTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryTagFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryTagClient<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryTags
     * const inventoryTags = await prisma.inventoryTag.findMany()
     * 
     * // Get first 10 InventoryTags
     * const inventoryTags = await prisma.inventoryTag.findMany({ take: 10 })
     * 
     * // Only select the `inventoryId`
     * const inventoryTagWithInventoryIdOnly = await prisma.inventoryTag.findMany({ select: { inventoryId: true } })
     * 
     */
    findMany<T extends InventoryTagFindManyArgs>(args?: SelectSubset<T, InventoryTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryTag.
     * @param {InventoryTagCreateArgs} args - Arguments to create a InventoryTag.
     * @example
     * // Create one InventoryTag
     * const InventoryTag = await prisma.inventoryTag.create({
     *   data: {
     *     // ... data to create a InventoryTag
     *   }
     * })
     * 
     */
    create<T extends InventoryTagCreateArgs>(args: SelectSubset<T, InventoryTagCreateArgs<ExtArgs>>): Prisma__InventoryTagClient<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryTags.
     * @param {InventoryTagCreateManyArgs} args - Arguments to create many InventoryTags.
     * @example
     * // Create many InventoryTags
     * const inventoryTag = await prisma.inventoryTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryTagCreateManyArgs>(args?: SelectSubset<T, InventoryTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryTags and returns the data saved in the database.
     * @param {InventoryTagCreateManyAndReturnArgs} args - Arguments to create many InventoryTags.
     * @example
     * // Create many InventoryTags
     * const inventoryTag = await prisma.inventoryTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryTags and only return the `inventoryId`
     * const inventoryTagWithInventoryIdOnly = await prisma.inventoryTag.createManyAndReturn({ 
     *   select: { inventoryId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryTagCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InventoryTag.
     * @param {InventoryTagDeleteArgs} args - Arguments to delete one InventoryTag.
     * @example
     * // Delete one InventoryTag
     * const InventoryTag = await prisma.inventoryTag.delete({
     *   where: {
     *     // ... filter to delete one InventoryTag
     *   }
     * })
     * 
     */
    delete<T extends InventoryTagDeleteArgs>(args: SelectSubset<T, InventoryTagDeleteArgs<ExtArgs>>): Prisma__InventoryTagClient<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryTag.
     * @param {InventoryTagUpdateArgs} args - Arguments to update one InventoryTag.
     * @example
     * // Update one InventoryTag
     * const inventoryTag = await prisma.inventoryTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryTagUpdateArgs>(args: SelectSubset<T, InventoryTagUpdateArgs<ExtArgs>>): Prisma__InventoryTagClient<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryTags.
     * @param {InventoryTagDeleteManyArgs} args - Arguments to filter InventoryTags to delete.
     * @example
     * // Delete a few InventoryTags
     * const { count } = await prisma.inventoryTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryTagDeleteManyArgs>(args?: SelectSubset<T, InventoryTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryTags
     * const inventoryTag = await prisma.inventoryTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryTagUpdateManyArgs>(args: SelectSubset<T, InventoryTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryTag.
     * @param {InventoryTagUpsertArgs} args - Arguments to update or create a InventoryTag.
     * @example
     * // Update or create a InventoryTag
     * const inventoryTag = await prisma.inventoryTag.upsert({
     *   create: {
     *     // ... data to create a InventoryTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryTag we want to update
     *   }
     * })
     */
    upsert<T extends InventoryTagUpsertArgs>(args: SelectSubset<T, InventoryTagUpsertArgs<ExtArgs>>): Prisma__InventoryTagClient<$Result.GetResult<Prisma.$InventoryTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTagCountArgs} args - Arguments to filter InventoryTags to count.
     * @example
     * // Count the number of InventoryTags
     * const count = await prisma.inventoryTag.count({
     *   where: {
     *     // ... the filter for the InventoryTags we want to count
     *   }
     * })
    **/
    count<T extends InventoryTagCountArgs>(
      args?: Subset<T, InventoryTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryTagAggregateArgs>(args: Subset<T, InventoryTagAggregateArgs>): Prisma.PrismaPromise<GetInventoryTagAggregateType<T>>

    /**
     * Group by InventoryTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryTagGroupByArgs['orderBy'] }
        : { orderBy?: InventoryTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryTag model
   */
  readonly fields: InventoryTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryTag model
   */ 
  interface InventoryTagFieldRefs {
    readonly inventoryId: FieldRef<"InventoryTag", 'String'>
    readonly tagId: FieldRef<"InventoryTag", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * InventoryTag findUnique
   */
  export type InventoryTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTag to fetch.
     */
    where: InventoryTagWhereUniqueInput
  }

  /**
   * InventoryTag findUniqueOrThrow
   */
  export type InventoryTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTag to fetch.
     */
    where: InventoryTagWhereUniqueInput
  }

  /**
   * InventoryTag findFirst
   */
  export type InventoryTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTag to fetch.
     */
    where?: InventoryTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryTags to fetch.
     */
    orderBy?: InventoryTagOrderByWithRelationInput | InventoryTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryTags.
     */
    cursor?: InventoryTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryTags.
     */
    distinct?: InventoryTagScalarFieldEnum | InventoryTagScalarFieldEnum[]
  }

  /**
   * InventoryTag findFirstOrThrow
   */
  export type InventoryTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTag to fetch.
     */
    where?: InventoryTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryTags to fetch.
     */
    orderBy?: InventoryTagOrderByWithRelationInput | InventoryTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryTags.
     */
    cursor?: InventoryTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryTags.
     */
    distinct?: InventoryTagScalarFieldEnum | InventoryTagScalarFieldEnum[]
  }

  /**
   * InventoryTag findMany
   */
  export type InventoryTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTags to fetch.
     */
    where?: InventoryTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryTags to fetch.
     */
    orderBy?: InventoryTagOrderByWithRelationInput | InventoryTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryTags.
     */
    cursor?: InventoryTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryTags.
     */
    skip?: number
    distinct?: InventoryTagScalarFieldEnum | InventoryTagScalarFieldEnum[]
  }

  /**
   * InventoryTag create
   */
  export type InventoryTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryTag.
     */
    data: XOR<InventoryTagCreateInput, InventoryTagUncheckedCreateInput>
  }

  /**
   * InventoryTag createMany
   */
  export type InventoryTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryTags.
     */
    data: InventoryTagCreateManyInput | InventoryTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryTag createManyAndReturn
   */
  export type InventoryTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InventoryTags.
     */
    data: InventoryTagCreateManyInput | InventoryTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryTag update
   */
  export type InventoryTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryTag.
     */
    data: XOR<InventoryTagUpdateInput, InventoryTagUncheckedUpdateInput>
    /**
     * Choose, which InventoryTag to update.
     */
    where: InventoryTagWhereUniqueInput
  }

  /**
   * InventoryTag updateMany
   */
  export type InventoryTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryTags.
     */
    data: XOR<InventoryTagUpdateManyMutationInput, InventoryTagUncheckedUpdateManyInput>
    /**
     * Filter which InventoryTags to update
     */
    where?: InventoryTagWhereInput
  }

  /**
   * InventoryTag upsert
   */
  export type InventoryTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryTag to update in case it exists.
     */
    where: InventoryTagWhereUniqueInput
    /**
     * In case the InventoryTag found by the `where` argument doesn't exist, create a new InventoryTag with this data.
     */
    create: XOR<InventoryTagCreateInput, InventoryTagUncheckedCreateInput>
    /**
     * In case the InventoryTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryTagUpdateInput, InventoryTagUncheckedUpdateInput>
  }

  /**
   * InventoryTag delete
   */
  export type InventoryTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
    /**
     * Filter which InventoryTag to delete.
     */
    where: InventoryTagWhereUniqueInput
  }

  /**
   * InventoryTag deleteMany
   */
  export type InventoryTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryTags to delete
     */
    where?: InventoryTagWhereInput
  }

  /**
   * InventoryTag without action
   */
  export type InventoryTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTag
     */
    select?: InventoryTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTagInclude<ExtArgs> | null
  }


  /**
   * Model InventoryAccess
   */

  export type AggregateInventoryAccess = {
    _count: InventoryAccessCountAggregateOutputType | null
    _min: InventoryAccessMinAggregateOutputType | null
    _max: InventoryAccessMaxAggregateOutputType | null
  }

  export type InventoryAccessMinAggregateOutputType = {
    inventoryId: string | null
    userId: string | null
    canWrite: boolean | null
  }

  export type InventoryAccessMaxAggregateOutputType = {
    inventoryId: string | null
    userId: string | null
    canWrite: boolean | null
  }

  export type InventoryAccessCountAggregateOutputType = {
    inventoryId: number
    userId: number
    canWrite: number
    _all: number
  }


  export type InventoryAccessMinAggregateInputType = {
    inventoryId?: true
    userId?: true
    canWrite?: true
  }

  export type InventoryAccessMaxAggregateInputType = {
    inventoryId?: true
    userId?: true
    canWrite?: true
  }

  export type InventoryAccessCountAggregateInputType = {
    inventoryId?: true
    userId?: true
    canWrite?: true
    _all?: true
  }

  export type InventoryAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryAccess to aggregate.
     */
    where?: InventoryAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryAccesses to fetch.
     */
    orderBy?: InventoryAccessOrderByWithRelationInput | InventoryAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryAccesses
    **/
    _count?: true | InventoryAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryAccessMaxAggregateInputType
  }

  export type GetInventoryAccessAggregateType<T extends InventoryAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryAccess[P]>
      : GetScalarType<T[P], AggregateInventoryAccess[P]>
  }




  export type InventoryAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryAccessWhereInput
    orderBy?: InventoryAccessOrderByWithAggregationInput | InventoryAccessOrderByWithAggregationInput[]
    by: InventoryAccessScalarFieldEnum[] | InventoryAccessScalarFieldEnum
    having?: InventoryAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryAccessCountAggregateInputType | true
    _min?: InventoryAccessMinAggregateInputType
    _max?: InventoryAccessMaxAggregateInputType
  }

  export type InventoryAccessGroupByOutputType = {
    inventoryId: string
    userId: string
    canWrite: boolean
    _count: InventoryAccessCountAggregateOutputType | null
    _min: InventoryAccessMinAggregateOutputType | null
    _max: InventoryAccessMaxAggregateOutputType | null
  }

  type GetInventoryAccessGroupByPayload<T extends InventoryAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryAccessGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryAccessGroupByOutputType[P]>
        }
      >
    >


  export type InventoryAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inventoryId?: boolean
    userId?: boolean
    canWrite?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryAccess"]>

  export type InventoryAccessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inventoryId?: boolean
    userId?: boolean
    canWrite?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryAccess"]>

  export type InventoryAccessSelectScalar = {
    inventoryId?: boolean
    userId?: boolean
    canWrite?: boolean
  }

  export type InventoryAccessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InventoryAccessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InventoryAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryAccess"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      inventoryId: string
      userId: string
      canWrite: boolean
    }, ExtArgs["result"]["inventoryAccess"]>
    composites: {}
  }

  type InventoryAccessGetPayload<S extends boolean | null | undefined | InventoryAccessDefaultArgs> = $Result.GetResult<Prisma.$InventoryAccessPayload, S>

  type InventoryAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryAccessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryAccessCountAggregateInputType | true
    }

  export interface InventoryAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryAccess'], meta: { name: 'InventoryAccess' } }
    /**
     * Find zero or one InventoryAccess that matches the filter.
     * @param {InventoryAccessFindUniqueArgs} args - Arguments to find a InventoryAccess
     * @example
     * // Get one InventoryAccess
     * const inventoryAccess = await prisma.inventoryAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryAccessFindUniqueArgs>(args: SelectSubset<T, InventoryAccessFindUniqueArgs<ExtArgs>>): Prisma__InventoryAccessClient<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryAccess that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryAccessFindUniqueOrThrowArgs} args - Arguments to find a InventoryAccess
     * @example
     * // Get one InventoryAccess
     * const inventoryAccess = await prisma.inventoryAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryAccessFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryAccessClient<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAccessFindFirstArgs} args - Arguments to find a InventoryAccess
     * @example
     * // Get one InventoryAccess
     * const inventoryAccess = await prisma.inventoryAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryAccessFindFirstArgs>(args?: SelectSubset<T, InventoryAccessFindFirstArgs<ExtArgs>>): Prisma__InventoryAccessClient<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAccessFindFirstOrThrowArgs} args - Arguments to find a InventoryAccess
     * @example
     * // Get one InventoryAccess
     * const inventoryAccess = await prisma.inventoryAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryAccessFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryAccessClient<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAccessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryAccesses
     * const inventoryAccesses = await prisma.inventoryAccess.findMany()
     * 
     * // Get first 10 InventoryAccesses
     * const inventoryAccesses = await prisma.inventoryAccess.findMany({ take: 10 })
     * 
     * // Only select the `inventoryId`
     * const inventoryAccessWithInventoryIdOnly = await prisma.inventoryAccess.findMany({ select: { inventoryId: true } })
     * 
     */
    findMany<T extends InventoryAccessFindManyArgs>(args?: SelectSubset<T, InventoryAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryAccess.
     * @param {InventoryAccessCreateArgs} args - Arguments to create a InventoryAccess.
     * @example
     * // Create one InventoryAccess
     * const InventoryAccess = await prisma.inventoryAccess.create({
     *   data: {
     *     // ... data to create a InventoryAccess
     *   }
     * })
     * 
     */
    create<T extends InventoryAccessCreateArgs>(args: SelectSubset<T, InventoryAccessCreateArgs<ExtArgs>>): Prisma__InventoryAccessClient<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryAccesses.
     * @param {InventoryAccessCreateManyArgs} args - Arguments to create many InventoryAccesses.
     * @example
     * // Create many InventoryAccesses
     * const inventoryAccess = await prisma.inventoryAccess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryAccessCreateManyArgs>(args?: SelectSubset<T, InventoryAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryAccesses and returns the data saved in the database.
     * @param {InventoryAccessCreateManyAndReturnArgs} args - Arguments to create many InventoryAccesses.
     * @example
     * // Create many InventoryAccesses
     * const inventoryAccess = await prisma.inventoryAccess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryAccesses and only return the `inventoryId`
     * const inventoryAccessWithInventoryIdOnly = await prisma.inventoryAccess.createManyAndReturn({ 
     *   select: { inventoryId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryAccessCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InventoryAccess.
     * @param {InventoryAccessDeleteArgs} args - Arguments to delete one InventoryAccess.
     * @example
     * // Delete one InventoryAccess
     * const InventoryAccess = await prisma.inventoryAccess.delete({
     *   where: {
     *     // ... filter to delete one InventoryAccess
     *   }
     * })
     * 
     */
    delete<T extends InventoryAccessDeleteArgs>(args: SelectSubset<T, InventoryAccessDeleteArgs<ExtArgs>>): Prisma__InventoryAccessClient<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryAccess.
     * @param {InventoryAccessUpdateArgs} args - Arguments to update one InventoryAccess.
     * @example
     * // Update one InventoryAccess
     * const inventoryAccess = await prisma.inventoryAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryAccessUpdateArgs>(args: SelectSubset<T, InventoryAccessUpdateArgs<ExtArgs>>): Prisma__InventoryAccessClient<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryAccesses.
     * @param {InventoryAccessDeleteManyArgs} args - Arguments to filter InventoryAccesses to delete.
     * @example
     * // Delete a few InventoryAccesses
     * const { count } = await prisma.inventoryAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryAccessDeleteManyArgs>(args?: SelectSubset<T, InventoryAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryAccesses
     * const inventoryAccess = await prisma.inventoryAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryAccessUpdateManyArgs>(args: SelectSubset<T, InventoryAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryAccess.
     * @param {InventoryAccessUpsertArgs} args - Arguments to update or create a InventoryAccess.
     * @example
     * // Update or create a InventoryAccess
     * const inventoryAccess = await prisma.inventoryAccess.upsert({
     *   create: {
     *     // ... data to create a InventoryAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryAccess we want to update
     *   }
     * })
     */
    upsert<T extends InventoryAccessUpsertArgs>(args: SelectSubset<T, InventoryAccessUpsertArgs<ExtArgs>>): Prisma__InventoryAccessClient<$Result.GetResult<Prisma.$InventoryAccessPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAccessCountArgs} args - Arguments to filter InventoryAccesses to count.
     * @example
     * // Count the number of InventoryAccesses
     * const count = await prisma.inventoryAccess.count({
     *   where: {
     *     // ... the filter for the InventoryAccesses we want to count
     *   }
     * })
    **/
    count<T extends InventoryAccessCountArgs>(
      args?: Subset<T, InventoryAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAccessAggregateArgs>(args: Subset<T, InventoryAccessAggregateArgs>): Prisma.PrismaPromise<GetInventoryAccessAggregateType<T>>

    /**
     * Group by InventoryAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryAccessGroupByArgs['orderBy'] }
        : { orderBy?: InventoryAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryAccess model
   */
  readonly fields: InventoryAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryAccess model
   */ 
  interface InventoryAccessFieldRefs {
    readonly inventoryId: FieldRef<"InventoryAccess", 'String'>
    readonly userId: FieldRef<"InventoryAccess", 'String'>
    readonly canWrite: FieldRef<"InventoryAccess", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * InventoryAccess findUnique
   */
  export type InventoryAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    /**
     * Filter, which InventoryAccess to fetch.
     */
    where: InventoryAccessWhereUniqueInput
  }

  /**
   * InventoryAccess findUniqueOrThrow
   */
  export type InventoryAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    /**
     * Filter, which InventoryAccess to fetch.
     */
    where: InventoryAccessWhereUniqueInput
  }

  /**
   * InventoryAccess findFirst
   */
  export type InventoryAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    /**
     * Filter, which InventoryAccess to fetch.
     */
    where?: InventoryAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryAccesses to fetch.
     */
    orderBy?: InventoryAccessOrderByWithRelationInput | InventoryAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryAccesses.
     */
    cursor?: InventoryAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryAccesses.
     */
    distinct?: InventoryAccessScalarFieldEnum | InventoryAccessScalarFieldEnum[]
  }

  /**
   * InventoryAccess findFirstOrThrow
   */
  export type InventoryAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    /**
     * Filter, which InventoryAccess to fetch.
     */
    where?: InventoryAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryAccesses to fetch.
     */
    orderBy?: InventoryAccessOrderByWithRelationInput | InventoryAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryAccesses.
     */
    cursor?: InventoryAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryAccesses.
     */
    distinct?: InventoryAccessScalarFieldEnum | InventoryAccessScalarFieldEnum[]
  }

  /**
   * InventoryAccess findMany
   */
  export type InventoryAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    /**
     * Filter, which InventoryAccesses to fetch.
     */
    where?: InventoryAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryAccesses to fetch.
     */
    orderBy?: InventoryAccessOrderByWithRelationInput | InventoryAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryAccesses.
     */
    cursor?: InventoryAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryAccesses.
     */
    skip?: number
    distinct?: InventoryAccessScalarFieldEnum | InventoryAccessScalarFieldEnum[]
  }

  /**
   * InventoryAccess create
   */
  export type InventoryAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryAccess.
     */
    data: XOR<InventoryAccessCreateInput, InventoryAccessUncheckedCreateInput>
  }

  /**
   * InventoryAccess createMany
   */
  export type InventoryAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryAccesses.
     */
    data: InventoryAccessCreateManyInput | InventoryAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryAccess createManyAndReturn
   */
  export type InventoryAccessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InventoryAccesses.
     */
    data: InventoryAccessCreateManyInput | InventoryAccessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryAccess update
   */
  export type InventoryAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryAccess.
     */
    data: XOR<InventoryAccessUpdateInput, InventoryAccessUncheckedUpdateInput>
    /**
     * Choose, which InventoryAccess to update.
     */
    where: InventoryAccessWhereUniqueInput
  }

  /**
   * InventoryAccess updateMany
   */
  export type InventoryAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryAccesses.
     */
    data: XOR<InventoryAccessUpdateManyMutationInput, InventoryAccessUncheckedUpdateManyInput>
    /**
     * Filter which InventoryAccesses to update
     */
    where?: InventoryAccessWhereInput
  }

  /**
   * InventoryAccess upsert
   */
  export type InventoryAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryAccess to update in case it exists.
     */
    where: InventoryAccessWhereUniqueInput
    /**
     * In case the InventoryAccess found by the `where` argument doesn't exist, create a new InventoryAccess with this data.
     */
    create: XOR<InventoryAccessCreateInput, InventoryAccessUncheckedCreateInput>
    /**
     * In case the InventoryAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryAccessUpdateInput, InventoryAccessUncheckedUpdateInput>
  }

  /**
   * InventoryAccess delete
   */
  export type InventoryAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
    /**
     * Filter which InventoryAccess to delete.
     */
    where: InventoryAccessWhereUniqueInput
  }

  /**
   * InventoryAccess deleteMany
   */
  export type InventoryAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryAccesses to delete
     */
    where?: InventoryAccessWhereInput
  }

  /**
   * InventoryAccess without action
   */
  export type InventoryAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryAccess
     */
    select?: InventoryAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryAccessInclude<ExtArgs> | null
  }


  /**
   * Model Like
   */

  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  export type LikeMinAggregateOutputType = {
    id: string | null
    itemId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LikeMaxAggregateOutputType = {
    id: string | null
    itemId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    itemId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type LikeMinAggregateInputType = {
    id?: true
    itemId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    itemId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    itemId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type LikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Like to aggregate.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }




  export type LikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithAggregationInput | LikeOrderByWithAggregationInput[]
    by: LikeScalarFieldEnum[] | LikeScalarFieldEnum
    having?: LikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeCountAggregateInputType | true
    _min?: LikeMinAggregateInputType
    _max?: LikeMaxAggregateInputType
  }

  export type LikeGroupByOutputType = {
    id: string
    itemId: string
    userId: string
    createdAt: Date
    _count: LikeCountAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
        }
      >
    >


  export type LikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    userId?: boolean
    createdAt?: boolean
    item?: boolean | ItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    userId?: boolean
    createdAt?: boolean
    item?: boolean | ItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectScalar = {
    id?: boolean
    itemId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type LikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Like"
    objects: {
      item: Prisma.$ItemPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["like"]>
    composites: {}
  }

  type LikeGetPayload<S extends boolean | null | undefined | LikeDefaultArgs> = $Result.GetResult<Prisma.$LikePayload, S>

  type LikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LikeCountAggregateInputType | true
    }

  export interface LikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Like'], meta: { name: 'Like' } }
    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeFindUniqueArgs>(args: SelectSubset<T, LikeFindUniqueArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Like that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LikeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeFindUniqueOrThrowArgs>(args: SelectSubset<T, LikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeFindFirstArgs>(args?: SelectSubset<T, LikeFindFirstArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Like that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeFindFirstOrThrowArgs>(args?: SelectSubset<T, LikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikeFindManyArgs>(args?: SelectSubset<T, LikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
     */
    create<T extends LikeCreateArgs>(args: SelectSubset<T, LikeCreateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Likes.
     * @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikeCreateManyArgs>(args?: SelectSubset<T, LikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Likes and returns the data saved in the database.
     * @param {LikeCreateManyAndReturnArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Likes and only return the `id`
     * const likeWithIdOnly = await prisma.like.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikeCreateManyAndReturnArgs>(args?: SelectSubset<T, LikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
     */
    delete<T extends LikeDeleteArgs>(args: SelectSubset<T, LikeDeleteArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikeUpdateArgs>(args: SelectSubset<T, LikeUpdateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikeDeleteManyArgs>(args?: SelectSubset<T, LikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikeUpdateManyArgs>(args: SelectSubset<T, LikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
     */
    upsert<T extends LikeUpsertArgs>(args: SelectSubset<T, LikeUpsertArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): Prisma.PrismaPromise<GetLikeAggregateType<T>>

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Like model
   */
  readonly fields: LikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Like model
   */ 
  interface LikeFieldRefs {
    readonly id: FieldRef<"Like", 'String'>
    readonly itemId: FieldRef<"Like", 'String'>
    readonly userId: FieldRef<"Like", 'String'>
    readonly createdAt: FieldRef<"Like", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Like findUnique
   */
  export type LikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findUniqueOrThrow
   */
  export type LikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findFirst
   */
  export type LikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findFirstOrThrow
   */
  export type LikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findMany
   */
  export type LikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like create
   */
  export type LikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to create a Like.
     */
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>
  }

  /**
   * Like createMany
   */
  export type LikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Like createManyAndReturn
   */
  export type LikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Like update
   */
  export type LikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to update a Like.
     */
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
    /**
     * Choose, which Like to update.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
  }

  /**
   * Like upsert
   */
  export type LikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The filter to search for the Like to update in case it exists.
     */
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
     */
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
  }

  /**
   * Like delete
   */
  export type LikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter which Like to delete.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to delete
     */
    where?: LikeWhereInput
  }

  /**
   * Like without action
   */
  export type LikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    avatar: 'avatar',
    provider: 'provider',
    providerId: 'providerId',
    roles: 'roles',
    blocked: 'blocked',
    createdAt: 'createdAt',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const InventoryScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    title: 'title',
    description: 'description',
    categoryId: 'categoryId',
    imageUrl: 'imageUrl',
    publicWrite: 'publicWrite',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InventoryScalarFieldEnum = (typeof InventoryScalarFieldEnum)[keyof typeof InventoryScalarFieldEnum]


  export const InventoryFieldScalarFieldEnum: {
    id: 'id',
    inventoryId: 'inventoryId',
    type: 'type',
    slot: 'slot',
    title: 'title',
    description: 'description',
    showInTable: 'showInTable',
    displayOrder: 'displayOrder'
  };

  export type InventoryFieldScalarFieldEnum = (typeof InventoryFieldScalarFieldEnum)[keyof typeof InventoryFieldScalarFieldEnum]


  export const CustomIdElementScalarFieldEnum: {
    id: 'id',
    inventoryId: 'inventoryId',
    order: 'order',
    type: 'type',
    param: 'param'
  };

  export type CustomIdElementScalarFieldEnum = (typeof CustomIdElementScalarFieldEnum)[keyof typeof CustomIdElementScalarFieldEnum]


  export const SequenceScalarFieldEnum: {
    inventoryId: 'inventoryId',
    value: 'value'
  };

  export type SequenceScalarFieldEnum = (typeof SequenceScalarFieldEnum)[keyof typeof SequenceScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    inventoryId: 'inventoryId',
    customId: 'customId',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    version: 'version',
    text1: 'text1',
    text2: 'text2',
    text3: 'text3',
    mtext1: 'mtext1',
    mtext2: 'mtext2',
    mtext3: 'mtext3',
    num1: 'num1',
    num2: 'num2',
    num3: 'num3',
    link1: 'link1',
    link2: 'link2',
    link3: 'link3',
    bool1: 'bool1',
    bool2: 'bool2',
    bool3: 'bool3',
    img1: 'img1',
    img2: 'img2',
    img3: 'img3'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    inventoryId: 'inventoryId',
    itemId: 'itemId',
    userId: 'userId',
    body: 'body',
    createdAt: 'createdAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const InventoryTagScalarFieldEnum: {
    inventoryId: 'inventoryId',
    tagId: 'tagId'
  };

  export type InventoryTagScalarFieldEnum = (typeof InventoryTagScalarFieldEnum)[keyof typeof InventoryTagScalarFieldEnum]


  export const InventoryAccessScalarFieldEnum: {
    inventoryId: 'inventoryId',
    userId: 'userId',
    canWrite: 'canWrite'
  };

  export type InventoryAccessScalarFieldEnum = (typeof InventoryAccessScalarFieldEnum)[keyof typeof InventoryAccessScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'FieldType'
   */
  export type EnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType'>
    


  /**
   * Reference to a field of type 'FieldType[]'
   */
  export type ListEnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType[]'>
    


  /**
   * Reference to a field of type 'IdElemType'
   */
  export type EnumIdElemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IdElemType'>
    


  /**
   * Reference to a field of type 'IdElemType[]'
   */
  export type ListEnumIdElemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IdElemType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    provider?: StringNullableFilter<"User"> | string | null
    providerId?: StringNullableFilter<"User"> | string | null
    roles?: StringNullableListFilter<"User">
    blocked?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    password?: StringNullableFilter<"User"> | string | null
    inventories?: InventoryListRelationFilter
    items?: ItemListRelationFilter
    comments?: CommentListRelationFilter
    accesses?: InventoryAccessListRelationFilter
    likes?: LikeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    roles?: SortOrder
    blocked?: SortOrder
    createdAt?: SortOrder
    password?: SortOrderInput | SortOrder
    inventories?: InventoryOrderByRelationAggregateInput
    items?: ItemOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    accesses?: InventoryAccessOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    provider?: StringNullableFilter<"User"> | string | null
    providerId?: StringNullableFilter<"User"> | string | null
    roles?: StringNullableListFilter<"User">
    blocked?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    password?: StringNullableFilter<"User"> | string | null
    inventories?: InventoryListRelationFilter
    items?: ItemListRelationFilter
    comments?: CommentListRelationFilter
    accesses?: InventoryAccessListRelationFilter
    likes?: LikeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    roles?: SortOrder
    blocked?: SortOrder
    createdAt?: SortOrder
    password?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    provider?: StringNullableWithAggregatesFilter<"User"> | string | null
    providerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    roles?: StringNullableListFilter<"User">
    blocked?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    inventories?: InventoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    inventories?: InventoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    inventories?: InventoryListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
  }

  export type InventoryWhereInput = {
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    id?: StringFilter<"Inventory"> | string
    ownerId?: StringFilter<"Inventory"> | string
    title?: StringFilter<"Inventory"> | string
    description?: StringFilter<"Inventory"> | string
    categoryId?: IntFilter<"Inventory"> | number
    imageUrl?: StringNullableFilter<"Inventory"> | string | null
    publicWrite?: BoolFilter<"Inventory"> | boolean
    version?: IntFilter<"Inventory"> | number
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeFilter<"Inventory"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    fields?: InventoryFieldListRelationFilter
    idElems?: CustomIdElementListRelationFilter
    items?: ItemListRelationFilter
    tags?: InventoryTagListRelationFilter
    access?: InventoryAccessListRelationFilter
    comments?: CommentListRelationFilter
    sequence?: XOR<SequenceNullableRelationFilter, SequenceWhereInput> | null
  }

  export type InventoryOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    publicWrite?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    fields?: InventoryFieldOrderByRelationAggregateInput
    idElems?: CustomIdElementOrderByRelationAggregateInput
    items?: ItemOrderByRelationAggregateInput
    tags?: InventoryTagOrderByRelationAggregateInput
    access?: InventoryAccessOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    sequence?: SequenceOrderByWithRelationInput
  }

  export type InventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    ownerId?: StringFilter<"Inventory"> | string
    title?: StringFilter<"Inventory"> | string
    description?: StringFilter<"Inventory"> | string
    categoryId?: IntFilter<"Inventory"> | number
    imageUrl?: StringNullableFilter<"Inventory"> | string | null
    publicWrite?: BoolFilter<"Inventory"> | boolean
    version?: IntFilter<"Inventory"> | number
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeFilter<"Inventory"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    fields?: InventoryFieldListRelationFilter
    idElems?: CustomIdElementListRelationFilter
    items?: ItemListRelationFilter
    tags?: InventoryTagListRelationFilter
    access?: InventoryAccessListRelationFilter
    comments?: CommentListRelationFilter
    sequence?: XOR<SequenceNullableRelationFilter, SequenceWhereInput> | null
  }, "id">

  export type InventoryOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    publicWrite?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InventoryCountOrderByAggregateInput
    _avg?: InventoryAvgOrderByAggregateInput
    _max?: InventoryMaxOrderByAggregateInput
    _min?: InventoryMinOrderByAggregateInput
    _sum?: InventorySumOrderByAggregateInput
  }

  export type InventoryScalarWhereWithAggregatesInput = {
    AND?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    OR?: InventoryScalarWhereWithAggregatesInput[]
    NOT?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Inventory"> | string
    ownerId?: StringWithAggregatesFilter<"Inventory"> | string
    title?: StringWithAggregatesFilter<"Inventory"> | string
    description?: StringWithAggregatesFilter<"Inventory"> | string
    categoryId?: IntWithAggregatesFilter<"Inventory"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    publicWrite?: BoolWithAggregatesFilter<"Inventory"> | boolean
    version?: IntWithAggregatesFilter<"Inventory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Inventory"> | Date | string
  }

  export type InventoryFieldWhereInput = {
    AND?: InventoryFieldWhereInput | InventoryFieldWhereInput[]
    OR?: InventoryFieldWhereInput[]
    NOT?: InventoryFieldWhereInput | InventoryFieldWhereInput[]
    id?: StringFilter<"InventoryField"> | string
    inventoryId?: StringFilter<"InventoryField"> | string
    type?: EnumFieldTypeFilter<"InventoryField"> | $Enums.FieldType
    slot?: IntFilter<"InventoryField"> | number
    title?: StringFilter<"InventoryField"> | string
    description?: StringNullableFilter<"InventoryField"> | string | null
    showInTable?: BoolFilter<"InventoryField"> | boolean
    displayOrder?: IntFilter<"InventoryField"> | number
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
  }

  export type InventoryFieldOrderByWithRelationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    type?: SortOrder
    slot?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    showInTable?: SortOrder
    displayOrder?: SortOrder
    inventory?: InventoryOrderByWithRelationInput
  }

  export type InventoryFieldWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    inventoryId_type_slot?: InventoryFieldInventoryIdTypeSlotCompoundUniqueInput
    AND?: InventoryFieldWhereInput | InventoryFieldWhereInput[]
    OR?: InventoryFieldWhereInput[]
    NOT?: InventoryFieldWhereInput | InventoryFieldWhereInput[]
    inventoryId?: StringFilter<"InventoryField"> | string
    type?: EnumFieldTypeFilter<"InventoryField"> | $Enums.FieldType
    slot?: IntFilter<"InventoryField"> | number
    title?: StringFilter<"InventoryField"> | string
    description?: StringNullableFilter<"InventoryField"> | string | null
    showInTable?: BoolFilter<"InventoryField"> | boolean
    displayOrder?: IntFilter<"InventoryField"> | number
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
  }, "id" | "inventoryId_type_slot">

  export type InventoryFieldOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    type?: SortOrder
    slot?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    showInTable?: SortOrder
    displayOrder?: SortOrder
    _count?: InventoryFieldCountOrderByAggregateInput
    _avg?: InventoryFieldAvgOrderByAggregateInput
    _max?: InventoryFieldMaxOrderByAggregateInput
    _min?: InventoryFieldMinOrderByAggregateInput
    _sum?: InventoryFieldSumOrderByAggregateInput
  }

  export type InventoryFieldScalarWhereWithAggregatesInput = {
    AND?: InventoryFieldScalarWhereWithAggregatesInput | InventoryFieldScalarWhereWithAggregatesInput[]
    OR?: InventoryFieldScalarWhereWithAggregatesInput[]
    NOT?: InventoryFieldScalarWhereWithAggregatesInput | InventoryFieldScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InventoryField"> | string
    inventoryId?: StringWithAggregatesFilter<"InventoryField"> | string
    type?: EnumFieldTypeWithAggregatesFilter<"InventoryField"> | $Enums.FieldType
    slot?: IntWithAggregatesFilter<"InventoryField"> | number
    title?: StringWithAggregatesFilter<"InventoryField"> | string
    description?: StringNullableWithAggregatesFilter<"InventoryField"> | string | null
    showInTable?: BoolWithAggregatesFilter<"InventoryField"> | boolean
    displayOrder?: IntWithAggregatesFilter<"InventoryField"> | number
  }

  export type CustomIdElementWhereInput = {
    AND?: CustomIdElementWhereInput | CustomIdElementWhereInput[]
    OR?: CustomIdElementWhereInput[]
    NOT?: CustomIdElementWhereInput | CustomIdElementWhereInput[]
    id?: StringFilter<"CustomIdElement"> | string
    inventoryId?: StringFilter<"CustomIdElement"> | string
    order?: IntFilter<"CustomIdElement"> | number
    type?: EnumIdElemTypeFilter<"CustomIdElement"> | $Enums.IdElemType
    param?: StringNullableFilter<"CustomIdElement"> | string | null
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
  }

  export type CustomIdElementOrderByWithRelationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    order?: SortOrder
    type?: SortOrder
    param?: SortOrderInput | SortOrder
    inventory?: InventoryOrderByWithRelationInput
  }

  export type CustomIdElementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomIdElementWhereInput | CustomIdElementWhereInput[]
    OR?: CustomIdElementWhereInput[]
    NOT?: CustomIdElementWhereInput | CustomIdElementWhereInput[]
    inventoryId?: StringFilter<"CustomIdElement"> | string
    order?: IntFilter<"CustomIdElement"> | number
    type?: EnumIdElemTypeFilter<"CustomIdElement"> | $Enums.IdElemType
    param?: StringNullableFilter<"CustomIdElement"> | string | null
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
  }, "id">

  export type CustomIdElementOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    order?: SortOrder
    type?: SortOrder
    param?: SortOrderInput | SortOrder
    _count?: CustomIdElementCountOrderByAggregateInput
    _avg?: CustomIdElementAvgOrderByAggregateInput
    _max?: CustomIdElementMaxOrderByAggregateInput
    _min?: CustomIdElementMinOrderByAggregateInput
    _sum?: CustomIdElementSumOrderByAggregateInput
  }

  export type CustomIdElementScalarWhereWithAggregatesInput = {
    AND?: CustomIdElementScalarWhereWithAggregatesInput | CustomIdElementScalarWhereWithAggregatesInput[]
    OR?: CustomIdElementScalarWhereWithAggregatesInput[]
    NOT?: CustomIdElementScalarWhereWithAggregatesInput | CustomIdElementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomIdElement"> | string
    inventoryId?: StringWithAggregatesFilter<"CustomIdElement"> | string
    order?: IntWithAggregatesFilter<"CustomIdElement"> | number
    type?: EnumIdElemTypeWithAggregatesFilter<"CustomIdElement"> | $Enums.IdElemType
    param?: StringNullableWithAggregatesFilter<"CustomIdElement"> | string | null
  }

  export type SequenceWhereInput = {
    AND?: SequenceWhereInput | SequenceWhereInput[]
    OR?: SequenceWhereInput[]
    NOT?: SequenceWhereInput | SequenceWhereInput[]
    inventoryId?: StringFilter<"Sequence"> | string
    value?: IntFilter<"Sequence"> | number
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
  }

  export type SequenceOrderByWithRelationInput = {
    inventoryId?: SortOrder
    value?: SortOrder
    inventory?: InventoryOrderByWithRelationInput
  }

  export type SequenceWhereUniqueInput = Prisma.AtLeast<{
    inventoryId?: string
    AND?: SequenceWhereInput | SequenceWhereInput[]
    OR?: SequenceWhereInput[]
    NOT?: SequenceWhereInput | SequenceWhereInput[]
    value?: IntFilter<"Sequence"> | number
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
  }, "inventoryId">

  export type SequenceOrderByWithAggregationInput = {
    inventoryId?: SortOrder
    value?: SortOrder
    _count?: SequenceCountOrderByAggregateInput
    _avg?: SequenceAvgOrderByAggregateInput
    _max?: SequenceMaxOrderByAggregateInput
    _min?: SequenceMinOrderByAggregateInput
    _sum?: SequenceSumOrderByAggregateInput
  }

  export type SequenceScalarWhereWithAggregatesInput = {
    AND?: SequenceScalarWhereWithAggregatesInput | SequenceScalarWhereWithAggregatesInput[]
    OR?: SequenceScalarWhereWithAggregatesInput[]
    NOT?: SequenceScalarWhereWithAggregatesInput | SequenceScalarWhereWithAggregatesInput[]
    inventoryId?: StringWithAggregatesFilter<"Sequence"> | string
    value?: IntWithAggregatesFilter<"Sequence"> | number
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: StringFilter<"Item"> | string
    inventoryId?: StringFilter<"Item"> | string
    customId?: StringFilter<"Item"> | string
    createdById?: StringFilter<"Item"> | string
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    version?: IntFilter<"Item"> | number
    text1?: StringNullableFilter<"Item"> | string | null
    text2?: StringNullableFilter<"Item"> | string | null
    text3?: StringNullableFilter<"Item"> | string | null
    mtext1?: StringNullableFilter<"Item"> | string | null
    mtext2?: StringNullableFilter<"Item"> | string | null
    mtext3?: StringNullableFilter<"Item"> | string | null
    num1?: FloatNullableFilter<"Item"> | number | null
    num2?: FloatNullableFilter<"Item"> | number | null
    num3?: FloatNullableFilter<"Item"> | number | null
    link1?: StringNullableFilter<"Item"> | string | null
    link2?: StringNullableFilter<"Item"> | string | null
    link3?: StringNullableFilter<"Item"> | string | null
    bool1?: BoolNullableFilter<"Item"> | boolean | null
    bool2?: BoolNullableFilter<"Item"> | boolean | null
    bool3?: BoolNullableFilter<"Item"> | boolean | null
    img1?: StringNullableFilter<"Item"> | string | null
    img2?: StringNullableFilter<"Item"> | string | null
    img3?: StringNullableFilter<"Item"> | string | null
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    customId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    text1?: SortOrderInput | SortOrder
    text2?: SortOrderInput | SortOrder
    text3?: SortOrderInput | SortOrder
    mtext1?: SortOrderInput | SortOrder
    mtext2?: SortOrderInput | SortOrder
    mtext3?: SortOrderInput | SortOrder
    num1?: SortOrderInput | SortOrder
    num2?: SortOrderInput | SortOrder
    num3?: SortOrderInput | SortOrder
    link1?: SortOrderInput | SortOrder
    link2?: SortOrderInput | SortOrder
    link3?: SortOrderInput | SortOrder
    bool1?: SortOrderInput | SortOrder
    bool2?: SortOrderInput | SortOrder
    bool3?: SortOrderInput | SortOrder
    img1?: SortOrderInput | SortOrder
    img2?: SortOrderInput | SortOrder
    img3?: SortOrderInput | SortOrder
    inventory?: InventoryOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    inventoryId_customId?: ItemInventoryIdCustomIdCompoundUniqueInput
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    inventoryId?: StringFilter<"Item"> | string
    customId?: StringFilter<"Item"> | string
    createdById?: StringFilter<"Item"> | string
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    version?: IntFilter<"Item"> | number
    text1?: StringNullableFilter<"Item"> | string | null
    text2?: StringNullableFilter<"Item"> | string | null
    text3?: StringNullableFilter<"Item"> | string | null
    mtext1?: StringNullableFilter<"Item"> | string | null
    mtext2?: StringNullableFilter<"Item"> | string | null
    mtext3?: StringNullableFilter<"Item"> | string | null
    num1?: FloatNullableFilter<"Item"> | number | null
    num2?: FloatNullableFilter<"Item"> | number | null
    num3?: FloatNullableFilter<"Item"> | number | null
    link1?: StringNullableFilter<"Item"> | string | null
    link2?: StringNullableFilter<"Item"> | string | null
    link3?: StringNullableFilter<"Item"> | string | null
    bool1?: BoolNullableFilter<"Item"> | boolean | null
    bool2?: BoolNullableFilter<"Item"> | boolean | null
    bool3?: BoolNullableFilter<"Item"> | boolean | null
    img1?: StringNullableFilter<"Item"> | string | null
    img2?: StringNullableFilter<"Item"> | string | null
    img3?: StringNullableFilter<"Item"> | string | null
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
  }, "id" | "inventoryId_customId">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    customId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    text1?: SortOrderInput | SortOrder
    text2?: SortOrderInput | SortOrder
    text3?: SortOrderInput | SortOrder
    mtext1?: SortOrderInput | SortOrder
    mtext2?: SortOrderInput | SortOrder
    mtext3?: SortOrderInput | SortOrder
    num1?: SortOrderInput | SortOrder
    num2?: SortOrderInput | SortOrder
    num3?: SortOrderInput | SortOrder
    link1?: SortOrderInput | SortOrder
    link2?: SortOrderInput | SortOrder
    link3?: SortOrderInput | SortOrder
    bool1?: SortOrderInput | SortOrder
    bool2?: SortOrderInput | SortOrder
    bool3?: SortOrderInput | SortOrder
    img1?: SortOrderInput | SortOrder
    img2?: SortOrderInput | SortOrder
    img3?: SortOrderInput | SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Item"> | string
    inventoryId?: StringWithAggregatesFilter<"Item"> | string
    customId?: StringWithAggregatesFilter<"Item"> | string
    createdById?: StringWithAggregatesFilter<"Item"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
    version?: IntWithAggregatesFilter<"Item"> | number
    text1?: StringNullableWithAggregatesFilter<"Item"> | string | null
    text2?: StringNullableWithAggregatesFilter<"Item"> | string | null
    text3?: StringNullableWithAggregatesFilter<"Item"> | string | null
    mtext1?: StringNullableWithAggregatesFilter<"Item"> | string | null
    mtext2?: StringNullableWithAggregatesFilter<"Item"> | string | null
    mtext3?: StringNullableWithAggregatesFilter<"Item"> | string | null
    num1?: FloatNullableWithAggregatesFilter<"Item"> | number | null
    num2?: FloatNullableWithAggregatesFilter<"Item"> | number | null
    num3?: FloatNullableWithAggregatesFilter<"Item"> | number | null
    link1?: StringNullableWithAggregatesFilter<"Item"> | string | null
    link2?: StringNullableWithAggregatesFilter<"Item"> | string | null
    link3?: StringNullableWithAggregatesFilter<"Item"> | string | null
    bool1?: BoolNullableWithAggregatesFilter<"Item"> | boolean | null
    bool2?: BoolNullableWithAggregatesFilter<"Item"> | boolean | null
    bool3?: BoolNullableWithAggregatesFilter<"Item"> | boolean | null
    img1?: StringNullableWithAggregatesFilter<"Item"> | string | null
    img2?: StringNullableWithAggregatesFilter<"Item"> | string | null
    img3?: StringNullableWithAggregatesFilter<"Item"> | string | null
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    inventoryId?: StringFilter<"Comment"> | string
    itemId?: StringNullableFilter<"Comment"> | string | null
    userId?: StringFilter<"Comment"> | string
    body?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    item?: XOR<ItemNullableRelationFilter, ItemWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemId?: SortOrderInput | SortOrder
    userId?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    inventory?: InventoryOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    inventoryId?: StringFilter<"Comment"> | string
    itemId?: StringNullableFilter<"Comment"> | string | null
    userId?: StringFilter<"Comment"> | string
    body?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    item?: XOR<ItemNullableRelationFilter, ItemWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemId?: SortOrderInput | SortOrder
    userId?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    inventoryId?: StringWithAggregatesFilter<"Comment"> | string
    itemId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    userId?: StringWithAggregatesFilter<"Comment"> | string
    body?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: IntFilter<"Tag"> | number
    name?: StringFilter<"Tag"> | string
    inventories?: InventoryTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    inventories?: InventoryTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    inventories?: InventoryTagListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tag"> | number
    name?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type InventoryTagWhereInput = {
    AND?: InventoryTagWhereInput | InventoryTagWhereInput[]
    OR?: InventoryTagWhereInput[]
    NOT?: InventoryTagWhereInput | InventoryTagWhereInput[]
    inventoryId?: StringFilter<"InventoryTag"> | string
    tagId?: IntFilter<"InventoryTag"> | number
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }

  export type InventoryTagOrderByWithRelationInput = {
    inventoryId?: SortOrder
    tagId?: SortOrder
    inventory?: InventoryOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type InventoryTagWhereUniqueInput = Prisma.AtLeast<{
    inventoryId_tagId?: InventoryTagInventoryIdTagIdCompoundUniqueInput
    AND?: InventoryTagWhereInput | InventoryTagWhereInput[]
    OR?: InventoryTagWhereInput[]
    NOT?: InventoryTagWhereInput | InventoryTagWhereInput[]
    inventoryId?: StringFilter<"InventoryTag"> | string
    tagId?: IntFilter<"InventoryTag"> | number
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }, "inventoryId_tagId">

  export type InventoryTagOrderByWithAggregationInput = {
    inventoryId?: SortOrder
    tagId?: SortOrder
    _count?: InventoryTagCountOrderByAggregateInput
    _avg?: InventoryTagAvgOrderByAggregateInput
    _max?: InventoryTagMaxOrderByAggregateInput
    _min?: InventoryTagMinOrderByAggregateInput
    _sum?: InventoryTagSumOrderByAggregateInput
  }

  export type InventoryTagScalarWhereWithAggregatesInput = {
    AND?: InventoryTagScalarWhereWithAggregatesInput | InventoryTagScalarWhereWithAggregatesInput[]
    OR?: InventoryTagScalarWhereWithAggregatesInput[]
    NOT?: InventoryTagScalarWhereWithAggregatesInput | InventoryTagScalarWhereWithAggregatesInput[]
    inventoryId?: StringWithAggregatesFilter<"InventoryTag"> | string
    tagId?: IntWithAggregatesFilter<"InventoryTag"> | number
  }

  export type InventoryAccessWhereInput = {
    AND?: InventoryAccessWhereInput | InventoryAccessWhereInput[]
    OR?: InventoryAccessWhereInput[]
    NOT?: InventoryAccessWhereInput | InventoryAccessWhereInput[]
    inventoryId?: StringFilter<"InventoryAccess"> | string
    userId?: StringFilter<"InventoryAccess"> | string
    canWrite?: BoolFilter<"InventoryAccess"> | boolean
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type InventoryAccessOrderByWithRelationInput = {
    inventoryId?: SortOrder
    userId?: SortOrder
    canWrite?: SortOrder
    inventory?: InventoryOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type InventoryAccessWhereUniqueInput = Prisma.AtLeast<{
    inventoryId_userId?: InventoryAccessInventoryIdUserIdCompoundUniqueInput
    AND?: InventoryAccessWhereInput | InventoryAccessWhereInput[]
    OR?: InventoryAccessWhereInput[]
    NOT?: InventoryAccessWhereInput | InventoryAccessWhereInput[]
    inventoryId?: StringFilter<"InventoryAccess"> | string
    userId?: StringFilter<"InventoryAccess"> | string
    canWrite?: BoolFilter<"InventoryAccess"> | boolean
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "inventoryId_userId">

  export type InventoryAccessOrderByWithAggregationInput = {
    inventoryId?: SortOrder
    userId?: SortOrder
    canWrite?: SortOrder
    _count?: InventoryAccessCountOrderByAggregateInput
    _max?: InventoryAccessMaxOrderByAggregateInput
    _min?: InventoryAccessMinOrderByAggregateInput
  }

  export type InventoryAccessScalarWhereWithAggregatesInput = {
    AND?: InventoryAccessScalarWhereWithAggregatesInput | InventoryAccessScalarWhereWithAggregatesInput[]
    OR?: InventoryAccessScalarWhereWithAggregatesInput[]
    NOT?: InventoryAccessScalarWhereWithAggregatesInput | InventoryAccessScalarWhereWithAggregatesInput[]
    inventoryId?: StringWithAggregatesFilter<"InventoryAccess"> | string
    userId?: StringWithAggregatesFilter<"InventoryAccess"> | string
    canWrite?: BoolWithAggregatesFilter<"InventoryAccess"> | boolean
  }

  export type LikeWhereInput = {
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    id?: StringFilter<"Like"> | string
    itemId?: StringFilter<"Like"> | string
    userId?: StringFilter<"Like"> | string
    createdAt?: DateTimeFilter<"Like"> | Date | string
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LikeOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    item?: ItemOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type LikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    itemId_userId?: LikeItemIdUserIdCompoundUniqueInput
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    itemId?: StringFilter<"Like"> | string
    userId?: StringFilter<"Like"> | string
    createdAt?: DateTimeFilter<"Like"> | Date | string
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "itemId_userId">

  export type LikeOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: LikeCountOrderByAggregateInput
    _max?: LikeMaxOrderByAggregateInput
    _min?: LikeMinOrderByAggregateInput
  }

  export type LikeScalarWhereWithAggregatesInput = {
    AND?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    OR?: LikeScalarWhereWithAggregatesInput[]
    NOT?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Like"> | string
    itemId?: StringWithAggregatesFilter<"Like"> | string
    userId?: StringWithAggregatesFilter<"Like"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Like"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryCreateNestedManyWithoutOwnerInput
    items?: ItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    accesses?: InventoryAccessCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryUncheckedCreateNestedManyWithoutOwnerInput
    items?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    accesses?: InventoryAccessUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUpdateManyWithoutOwnerNestedInput
    items?: ItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    accesses?: InventoryAccessUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUncheckedUpdateManyWithoutOwnerNestedInput
    items?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    accesses?: InventoryAccessUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    name: string
    inventories?: InventoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    inventories?: InventoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventories?: InventoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    inventories?: InventoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InventoryCreateInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutInventoriesInput
    category: CategoryCreateNestedOneWithoutInventoriesInput
    fields?: InventoryFieldCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementCreateNestedManyWithoutInventoryInput
    items?: ItemCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessCreateNestedManyWithoutInventoryInput
    comments?: CommentCreateNestedManyWithoutInventoryInput
    sequence?: SequenceCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput
    items?: ItemUncheckedCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagUncheckedCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput
    comments?: CommentUncheckedCreateNestedManyWithoutInventoryInput
    sequence?: SequenceUncheckedCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutInventoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutInventoriesNestedInput
    fields?: InventoryFieldUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUpdateManyWithoutInventoryNestedInput
    items?: ItemUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUpdateManyWithoutInventoryNestedInput
    comments?: CommentUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUncheckedUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryCreateManyInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryFieldCreateInput = {
    id?: string
    type: $Enums.FieldType
    slot: number
    title: string
    description?: string | null
    showInTable?: boolean
    displayOrder?: number
    inventory: InventoryCreateNestedOneWithoutFieldsInput
  }

  export type InventoryFieldUncheckedCreateInput = {
    id?: string
    inventoryId: string
    type: $Enums.FieldType
    slot: number
    title: string
    description?: string | null
    showInTable?: boolean
    displayOrder?: number
  }

  export type InventoryFieldUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    slot?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    showInTable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    inventory?: InventoryUpdateOneRequiredWithoutFieldsNestedInput
  }

  export type InventoryFieldUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    slot?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    showInTable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryFieldCreateManyInput = {
    id?: string
    inventoryId: string
    type: $Enums.FieldType
    slot: number
    title: string
    description?: string | null
    showInTable?: boolean
    displayOrder?: number
  }

  export type InventoryFieldUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    slot?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    showInTable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryFieldUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    slot?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    showInTable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type CustomIdElementCreateInput = {
    id?: string
    order: number
    type: $Enums.IdElemType
    param?: string | null
    inventory: InventoryCreateNestedOneWithoutIdElemsInput
  }

  export type CustomIdElementUncheckedCreateInput = {
    id?: string
    inventoryId: string
    order: number
    type: $Enums.IdElemType
    param?: string | null
  }

  export type CustomIdElementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    type?: EnumIdElemTypeFieldUpdateOperationsInput | $Enums.IdElemType
    param?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateOneRequiredWithoutIdElemsNestedInput
  }

  export type CustomIdElementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    type?: EnumIdElemTypeFieldUpdateOperationsInput | $Enums.IdElemType
    param?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomIdElementCreateManyInput = {
    id?: string
    inventoryId: string
    order: number
    type: $Enums.IdElemType
    param?: string | null
  }

  export type CustomIdElementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    type?: EnumIdElemTypeFieldUpdateOperationsInput | $Enums.IdElemType
    param?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomIdElementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    type?: EnumIdElemTypeFieldUpdateOperationsInput | $Enums.IdElemType
    param?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SequenceCreateInput = {
    value?: number
    inventory: InventoryCreateNestedOneWithoutSequenceInput
  }

  export type SequenceUncheckedCreateInput = {
    inventoryId: string
    value?: number
  }

  export type SequenceUpdateInput = {
    value?: IntFieldUpdateOperationsInput | number
    inventory?: InventoryUpdateOneRequiredWithoutSequenceNestedInput
  }

  export type SequenceUncheckedUpdateInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type SequenceCreateManyInput = {
    inventoryId: string
    value?: number
  }

  export type SequenceUpdateManyMutationInput = {
    value?: IntFieldUpdateOperationsInput | number
  }

  export type SequenceUncheckedUpdateManyInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type ItemCreateInput = {
    id?: string
    customId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    inventory: InventoryCreateNestedOneWithoutItemsInput
    createdBy: UserCreateNestedOneWithoutItemsInput
    comments?: CommentCreateNestedManyWithoutItemInput
    likes?: LikeCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateInput = {
    id?: string
    inventoryId: string
    customId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutItemInput
    likes?: LikeUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateOneRequiredWithoutItemsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutItemsNestedInput
    comments?: CommentUpdateManyWithoutItemNestedInput
    likes?: LikeUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutItemNestedInput
    likes?: LikeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemCreateManyInput = {
    id?: string
    inventoryId: string
    customId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
  }

  export type ItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateInput = {
    id?: string
    body: string
    createdAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutCommentsInput
    item?: ItemCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    inventoryId: string
    itemId?: string | null
    userId: string
    body: string
    createdAt?: Date | string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutCommentsNestedInput
    item?: ItemUpdateOneWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    id?: string
    inventoryId: string
    itemId?: string | null
    userId: string
    body: string
    createdAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    name: string
    inventories?: InventoryTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: number
    name: string
    inventories?: InventoryTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventories?: InventoryTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    inventories?: InventoryTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: number
    name: string
  }

  export type TagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InventoryTagCreateInput = {
    inventory: InventoryCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutInventoriesInput
  }

  export type InventoryTagUncheckedCreateInput = {
    inventoryId: string
    tagId: number
  }

  export type InventoryTagUpdateInput = {
    inventory?: InventoryUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutInventoriesNestedInput
  }

  export type InventoryTagUncheckedUpdateInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTagCreateManyInput = {
    inventoryId: string
    tagId: number
  }

  export type InventoryTagUpdateManyMutationInput = {

  }

  export type InventoryTagUncheckedUpdateManyInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryAccessCreateInput = {
    canWrite?: boolean
    inventory: InventoryCreateNestedOneWithoutAccessInput
    user: UserCreateNestedOneWithoutAccessesInput
  }

  export type InventoryAccessUncheckedCreateInput = {
    inventoryId: string
    userId: string
    canWrite?: boolean
  }

  export type InventoryAccessUpdateInput = {
    canWrite?: BoolFieldUpdateOperationsInput | boolean
    inventory?: InventoryUpdateOneRequiredWithoutAccessNestedInput
    user?: UserUpdateOneRequiredWithoutAccessesNestedInput
  }

  export type InventoryAccessUncheckedUpdateInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    canWrite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryAccessCreateManyInput = {
    inventoryId: string
    userId: string
    canWrite?: boolean
  }

  export type InventoryAccessUpdateManyMutationInput = {
    canWrite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryAccessUncheckedUpdateManyInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    canWrite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LikeCreateInput = {
    id?: string
    createdAt?: Date | string
    item: ItemCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateInput = {
    id?: string
    itemId: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateManyInput = {
    id?: string
    itemId: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type InventoryListRelationFilter = {
    every?: InventoryWhereInput
    some?: InventoryWhereInput
    none?: InventoryWhereInput
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type InventoryAccessListRelationFilter = {
    every?: InventoryAccessWhereInput
    some?: InventoryAccessWhereInput
    none?: InventoryAccessWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type InventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    roles?: SortOrder
    blocked?: SortOrder
    createdAt?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    blocked?: SortOrder
    createdAt?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    blocked?: SortOrder
    createdAt?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type InventoryFieldListRelationFilter = {
    every?: InventoryFieldWhereInput
    some?: InventoryFieldWhereInput
    none?: InventoryFieldWhereInput
  }

  export type CustomIdElementListRelationFilter = {
    every?: CustomIdElementWhereInput
    some?: CustomIdElementWhereInput
    none?: CustomIdElementWhereInput
  }

  export type InventoryTagListRelationFilter = {
    every?: InventoryTagWhereInput
    some?: InventoryTagWhereInput
    none?: InventoryTagWhereInput
  }

  export type SequenceNullableRelationFilter = {
    is?: SequenceWhereInput | null
    isNot?: SequenceWhereInput | null
  }

  export type InventoryFieldOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomIdElementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    imageUrl?: SortOrder
    publicWrite?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryAvgOrderByAggregateInput = {
    categoryId?: SortOrder
    version?: SortOrder
  }

  export type InventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    imageUrl?: SortOrder
    publicWrite?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    imageUrl?: SortOrder
    publicWrite?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventorySumOrderByAggregateInput = {
    categoryId?: SortOrder
    version?: SortOrder
  }

  export type EnumFieldTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeFilter<$PrismaModel> | $Enums.FieldType
  }

  export type InventoryRelationFilter = {
    is?: InventoryWhereInput
    isNot?: InventoryWhereInput
  }

  export type InventoryFieldInventoryIdTypeSlotCompoundUniqueInput = {
    inventoryId: string
    type: $Enums.FieldType
    slot: number
  }

  export type InventoryFieldCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    type?: SortOrder
    slot?: SortOrder
    title?: SortOrder
    description?: SortOrder
    showInTable?: SortOrder
    displayOrder?: SortOrder
  }

  export type InventoryFieldAvgOrderByAggregateInput = {
    slot?: SortOrder
    displayOrder?: SortOrder
  }

  export type InventoryFieldMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    type?: SortOrder
    slot?: SortOrder
    title?: SortOrder
    description?: SortOrder
    showInTable?: SortOrder
    displayOrder?: SortOrder
  }

  export type InventoryFieldMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    type?: SortOrder
    slot?: SortOrder
    title?: SortOrder
    description?: SortOrder
    showInTable?: SortOrder
    displayOrder?: SortOrder
  }

  export type InventoryFieldSumOrderByAggregateInput = {
    slot?: SortOrder
    displayOrder?: SortOrder
  }

  export type EnumFieldTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel> | $Enums.FieldType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeFilter<$PrismaModel>
  }

  export type EnumIdElemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IdElemType | EnumIdElemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IdElemType[] | ListEnumIdElemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IdElemType[] | ListEnumIdElemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIdElemTypeFilter<$PrismaModel> | $Enums.IdElemType
  }

  export type CustomIdElementCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    order?: SortOrder
    type?: SortOrder
    param?: SortOrder
  }

  export type CustomIdElementAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type CustomIdElementMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    order?: SortOrder
    type?: SortOrder
    param?: SortOrder
  }

  export type CustomIdElementMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    order?: SortOrder
    type?: SortOrder
    param?: SortOrder
  }

  export type CustomIdElementSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumIdElemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IdElemType | EnumIdElemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IdElemType[] | ListEnumIdElemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IdElemType[] | ListEnumIdElemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIdElemTypeWithAggregatesFilter<$PrismaModel> | $Enums.IdElemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIdElemTypeFilter<$PrismaModel>
    _max?: NestedEnumIdElemTypeFilter<$PrismaModel>
  }

  export type SequenceCountOrderByAggregateInput = {
    inventoryId?: SortOrder
    value?: SortOrder
  }

  export type SequenceAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type SequenceMaxOrderByAggregateInput = {
    inventoryId?: SortOrder
    value?: SortOrder
  }

  export type SequenceMinOrderByAggregateInput = {
    inventoryId?: SortOrder
    value?: SortOrder
  }

  export type SequenceSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ItemInventoryIdCustomIdCompoundUniqueInput = {
    inventoryId: string
    customId: string
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    customId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    text1?: SortOrder
    text2?: SortOrder
    text3?: SortOrder
    mtext1?: SortOrder
    mtext2?: SortOrder
    mtext3?: SortOrder
    num1?: SortOrder
    num2?: SortOrder
    num3?: SortOrder
    link1?: SortOrder
    link2?: SortOrder
    link3?: SortOrder
    bool1?: SortOrder
    bool2?: SortOrder
    bool3?: SortOrder
    img1?: SortOrder
    img2?: SortOrder
    img3?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    version?: SortOrder
    num1?: SortOrder
    num2?: SortOrder
    num3?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    customId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    text1?: SortOrder
    text2?: SortOrder
    text3?: SortOrder
    mtext1?: SortOrder
    mtext2?: SortOrder
    mtext3?: SortOrder
    num1?: SortOrder
    num2?: SortOrder
    num3?: SortOrder
    link1?: SortOrder
    link2?: SortOrder
    link3?: SortOrder
    bool1?: SortOrder
    bool2?: SortOrder
    bool3?: SortOrder
    img1?: SortOrder
    img2?: SortOrder
    img3?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    customId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    text1?: SortOrder
    text2?: SortOrder
    text3?: SortOrder
    mtext1?: SortOrder
    mtext2?: SortOrder
    mtext3?: SortOrder
    num1?: SortOrder
    num2?: SortOrder
    num3?: SortOrder
    link1?: SortOrder
    link2?: SortOrder
    link3?: SortOrder
    bool1?: SortOrder
    bool2?: SortOrder
    bool3?: SortOrder
    img1?: SortOrder
    img2?: SortOrder
    img3?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    version?: SortOrder
    num1?: SortOrder
    num2?: SortOrder
    num3?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type ItemNullableRelationFilter = {
    is?: ItemWhereInput | null
    isNot?: ItemWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemId?: SortOrder
    userId?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemId?: SortOrder
    userId?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    itemId?: SortOrder
    userId?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type InventoryTagInventoryIdTagIdCompoundUniqueInput = {
    inventoryId: string
    tagId: number
  }

  export type InventoryTagCountOrderByAggregateInput = {
    inventoryId?: SortOrder
    tagId?: SortOrder
  }

  export type InventoryTagAvgOrderByAggregateInput = {
    tagId?: SortOrder
  }

  export type InventoryTagMaxOrderByAggregateInput = {
    inventoryId?: SortOrder
    tagId?: SortOrder
  }

  export type InventoryTagMinOrderByAggregateInput = {
    inventoryId?: SortOrder
    tagId?: SortOrder
  }

  export type InventoryTagSumOrderByAggregateInput = {
    tagId?: SortOrder
  }

  export type InventoryAccessInventoryIdUserIdCompoundUniqueInput = {
    inventoryId: string
    userId: string
  }

  export type InventoryAccessCountOrderByAggregateInput = {
    inventoryId?: SortOrder
    userId?: SortOrder
    canWrite?: SortOrder
  }

  export type InventoryAccessMaxOrderByAggregateInput = {
    inventoryId?: SortOrder
    userId?: SortOrder
    canWrite?: SortOrder
  }

  export type InventoryAccessMinOrderByAggregateInput = {
    inventoryId?: SortOrder
    userId?: SortOrder
    canWrite?: SortOrder
  }

  export type ItemRelationFilter = {
    is?: ItemWhereInput
    isNot?: ItemWhereInput
  }

  export type LikeItemIdUserIdCompoundUniqueInput = {
    itemId: string
    userId: string
  }

  export type LikeCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCreaterolesInput = {
    set: string[]
  }

  export type InventoryCreateNestedManyWithoutOwnerInput = {
    create?: XOR<InventoryCreateWithoutOwnerInput, InventoryUncheckedCreateWithoutOwnerInput> | InventoryCreateWithoutOwnerInput[] | InventoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutOwnerInput | InventoryCreateOrConnectWithoutOwnerInput[]
    createMany?: InventoryCreateManyOwnerInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type ItemCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput> | ItemCreateWithoutCreatedByInput[] | ItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCreatedByInput | ItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: ItemCreateManyCreatedByInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type InventoryAccessCreateNestedManyWithoutUserInput = {
    create?: XOR<InventoryAccessCreateWithoutUserInput, InventoryAccessUncheckedCreateWithoutUserInput> | InventoryAccessCreateWithoutUserInput[] | InventoryAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryAccessCreateOrConnectWithoutUserInput | InventoryAccessCreateOrConnectWithoutUserInput[]
    createMany?: InventoryAccessCreateManyUserInputEnvelope
    connect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type InventoryUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<InventoryCreateWithoutOwnerInput, InventoryUncheckedCreateWithoutOwnerInput> | InventoryCreateWithoutOwnerInput[] | InventoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutOwnerInput | InventoryCreateOrConnectWithoutOwnerInput[]
    createMany?: InventoryCreateManyOwnerInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput> | ItemCreateWithoutCreatedByInput[] | ItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCreatedByInput | ItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: ItemCreateManyCreatedByInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type InventoryAccessUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InventoryAccessCreateWithoutUserInput, InventoryAccessUncheckedCreateWithoutUserInput> | InventoryAccessCreateWithoutUserInput[] | InventoryAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryAccessCreateOrConnectWithoutUserInput | InventoryAccessCreateOrConnectWithoutUserInput[]
    createMany?: InventoryAccessCreateManyUserInputEnvelope
    connect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdaterolesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type InventoryUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<InventoryCreateWithoutOwnerInput, InventoryUncheckedCreateWithoutOwnerInput> | InventoryCreateWithoutOwnerInput[] | InventoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutOwnerInput | InventoryCreateOrConnectWithoutOwnerInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutOwnerInput | InventoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: InventoryCreateManyOwnerInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutOwnerInput | InventoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutOwnerInput | InventoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type ItemUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput> | ItemCreateWithoutCreatedByInput[] | ItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCreatedByInput | ItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutCreatedByInput | ItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ItemCreateManyCreatedByInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutCreatedByInput | ItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutCreatedByInput | ItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type InventoryAccessUpdateManyWithoutUserNestedInput = {
    create?: XOR<InventoryAccessCreateWithoutUserInput, InventoryAccessUncheckedCreateWithoutUserInput> | InventoryAccessCreateWithoutUserInput[] | InventoryAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryAccessCreateOrConnectWithoutUserInput | InventoryAccessCreateOrConnectWithoutUserInput[]
    upsert?: InventoryAccessUpsertWithWhereUniqueWithoutUserInput | InventoryAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InventoryAccessCreateManyUserInputEnvelope
    set?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    disconnect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    delete?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    connect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    update?: InventoryAccessUpdateWithWhereUniqueWithoutUserInput | InventoryAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InventoryAccessUpdateManyWithWhereWithoutUserInput | InventoryAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InventoryAccessScalarWhereInput | InventoryAccessScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type InventoryUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<InventoryCreateWithoutOwnerInput, InventoryUncheckedCreateWithoutOwnerInput> | InventoryCreateWithoutOwnerInput[] | InventoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutOwnerInput | InventoryCreateOrConnectWithoutOwnerInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutOwnerInput | InventoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: InventoryCreateManyOwnerInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutOwnerInput | InventoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutOwnerInput | InventoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput> | ItemCreateWithoutCreatedByInput[] | ItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCreatedByInput | ItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutCreatedByInput | ItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ItemCreateManyCreatedByInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutCreatedByInput | ItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutCreatedByInput | ItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type InventoryAccessUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InventoryAccessCreateWithoutUserInput, InventoryAccessUncheckedCreateWithoutUserInput> | InventoryAccessCreateWithoutUserInput[] | InventoryAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryAccessCreateOrConnectWithoutUserInput | InventoryAccessCreateOrConnectWithoutUserInput[]
    upsert?: InventoryAccessUpsertWithWhereUniqueWithoutUserInput | InventoryAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InventoryAccessCreateManyUserInputEnvelope
    set?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    disconnect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    delete?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    connect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    update?: InventoryAccessUpdateWithWhereUniqueWithoutUserInput | InventoryAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InventoryAccessUpdateManyWithWhereWithoutUserInput | InventoryAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InventoryAccessScalarWhereInput | InventoryAccessScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type InventoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput> | InventoryCreateWithoutCategoryInput[] | InventoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCategoryInput | InventoryCreateOrConnectWithoutCategoryInput[]
    createMany?: InventoryCreateManyCategoryInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type InventoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput> | InventoryCreateWithoutCategoryInput[] | InventoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCategoryInput | InventoryCreateOrConnectWithoutCategoryInput[]
    createMany?: InventoryCreateManyCategoryInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type InventoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput> | InventoryCreateWithoutCategoryInput[] | InventoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCategoryInput | InventoryCreateOrConnectWithoutCategoryInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutCategoryInput | InventoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: InventoryCreateManyCategoryInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutCategoryInput | InventoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutCategoryInput | InventoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InventoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput> | InventoryCreateWithoutCategoryInput[] | InventoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCategoryInput | InventoryCreateOrConnectWithoutCategoryInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutCategoryInput | InventoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: InventoryCreateManyCategoryInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutCategoryInput | InventoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutCategoryInput | InventoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutInventoriesInput = {
    create?: XOR<UserCreateWithoutInventoriesInput, UserUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoriesInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutInventoriesInput = {
    create?: XOR<CategoryCreateWithoutInventoriesInput, CategoryUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutInventoriesInput
    connect?: CategoryWhereUniqueInput
  }

  export type InventoryFieldCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryFieldCreateWithoutInventoryInput, InventoryFieldUncheckedCreateWithoutInventoryInput> | InventoryFieldCreateWithoutInventoryInput[] | InventoryFieldUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryFieldCreateOrConnectWithoutInventoryInput | InventoryFieldCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryFieldCreateManyInventoryInputEnvelope
    connect?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
  }

  export type CustomIdElementCreateNestedManyWithoutInventoryInput = {
    create?: XOR<CustomIdElementCreateWithoutInventoryInput, CustomIdElementUncheckedCreateWithoutInventoryInput> | CustomIdElementCreateWithoutInventoryInput[] | CustomIdElementUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CustomIdElementCreateOrConnectWithoutInventoryInput | CustomIdElementCreateOrConnectWithoutInventoryInput[]
    createMany?: CustomIdElementCreateManyInventoryInputEnvelope
    connect?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
  }

  export type ItemCreateNestedManyWithoutInventoryInput = {
    create?: XOR<ItemCreateWithoutInventoryInput, ItemUncheckedCreateWithoutInventoryInput> | ItemCreateWithoutInventoryInput[] | ItemUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutInventoryInput | ItemCreateOrConnectWithoutInventoryInput[]
    createMany?: ItemCreateManyInventoryInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type InventoryTagCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryTagCreateWithoutInventoryInput, InventoryTagUncheckedCreateWithoutInventoryInput> | InventoryTagCreateWithoutInventoryInput[] | InventoryTagUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryTagCreateOrConnectWithoutInventoryInput | InventoryTagCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryTagCreateManyInventoryInputEnvelope
    connect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
  }

  export type InventoryAccessCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryAccessCreateWithoutInventoryInput, InventoryAccessUncheckedCreateWithoutInventoryInput> | InventoryAccessCreateWithoutInventoryInput[] | InventoryAccessUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryAccessCreateOrConnectWithoutInventoryInput | InventoryAccessCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryAccessCreateManyInventoryInputEnvelope
    connect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutInventoryInput = {
    create?: XOR<CommentCreateWithoutInventoryInput, CommentUncheckedCreateWithoutInventoryInput> | CommentCreateWithoutInventoryInput[] | CommentUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutInventoryInput | CommentCreateOrConnectWithoutInventoryInput[]
    createMany?: CommentCreateManyInventoryInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type SequenceCreateNestedOneWithoutInventoryInput = {
    create?: XOR<SequenceCreateWithoutInventoryInput, SequenceUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: SequenceCreateOrConnectWithoutInventoryInput
    connect?: SequenceWhereUniqueInput
  }

  export type InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryFieldCreateWithoutInventoryInput, InventoryFieldUncheckedCreateWithoutInventoryInput> | InventoryFieldCreateWithoutInventoryInput[] | InventoryFieldUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryFieldCreateOrConnectWithoutInventoryInput | InventoryFieldCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryFieldCreateManyInventoryInputEnvelope
    connect?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
  }

  export type CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<CustomIdElementCreateWithoutInventoryInput, CustomIdElementUncheckedCreateWithoutInventoryInput> | CustomIdElementCreateWithoutInventoryInput[] | CustomIdElementUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CustomIdElementCreateOrConnectWithoutInventoryInput | CustomIdElementCreateOrConnectWithoutInventoryInput[]
    createMany?: CustomIdElementCreateManyInventoryInputEnvelope
    connect?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<ItemCreateWithoutInventoryInput, ItemUncheckedCreateWithoutInventoryInput> | ItemCreateWithoutInventoryInput[] | ItemUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutInventoryInput | ItemCreateOrConnectWithoutInventoryInput[]
    createMany?: ItemCreateManyInventoryInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type InventoryTagUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryTagCreateWithoutInventoryInput, InventoryTagUncheckedCreateWithoutInventoryInput> | InventoryTagCreateWithoutInventoryInput[] | InventoryTagUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryTagCreateOrConnectWithoutInventoryInput | InventoryTagCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryTagCreateManyInventoryInputEnvelope
    connect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
  }

  export type InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryAccessCreateWithoutInventoryInput, InventoryAccessUncheckedCreateWithoutInventoryInput> | InventoryAccessCreateWithoutInventoryInput[] | InventoryAccessUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryAccessCreateOrConnectWithoutInventoryInput | InventoryAccessCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryAccessCreateManyInventoryInputEnvelope
    connect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<CommentCreateWithoutInventoryInput, CommentUncheckedCreateWithoutInventoryInput> | CommentCreateWithoutInventoryInput[] | CommentUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutInventoryInput | CommentCreateOrConnectWithoutInventoryInput[]
    createMany?: CommentCreateManyInventoryInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type SequenceUncheckedCreateNestedOneWithoutInventoryInput = {
    create?: XOR<SequenceCreateWithoutInventoryInput, SequenceUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: SequenceCreateOrConnectWithoutInventoryInput
    connect?: SequenceWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInventoriesNestedInput = {
    create?: XOR<UserCreateWithoutInventoriesInput, UserUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoriesInput
    upsert?: UserUpsertWithoutInventoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInventoriesInput, UserUpdateWithoutInventoriesInput>, UserUncheckedUpdateWithoutInventoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutInventoriesNestedInput = {
    create?: XOR<CategoryCreateWithoutInventoriesInput, CategoryUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutInventoriesInput
    upsert?: CategoryUpsertWithoutInventoriesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutInventoriesInput, CategoryUpdateWithoutInventoriesInput>, CategoryUncheckedUpdateWithoutInventoriesInput>
  }

  export type InventoryFieldUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryFieldCreateWithoutInventoryInput, InventoryFieldUncheckedCreateWithoutInventoryInput> | InventoryFieldCreateWithoutInventoryInput[] | InventoryFieldUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryFieldCreateOrConnectWithoutInventoryInput | InventoryFieldCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryFieldUpsertWithWhereUniqueWithoutInventoryInput | InventoryFieldUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryFieldCreateManyInventoryInputEnvelope
    set?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
    disconnect?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
    delete?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
    connect?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
    update?: InventoryFieldUpdateWithWhereUniqueWithoutInventoryInput | InventoryFieldUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryFieldUpdateManyWithWhereWithoutInventoryInput | InventoryFieldUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryFieldScalarWhereInput | InventoryFieldScalarWhereInput[]
  }

  export type CustomIdElementUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<CustomIdElementCreateWithoutInventoryInput, CustomIdElementUncheckedCreateWithoutInventoryInput> | CustomIdElementCreateWithoutInventoryInput[] | CustomIdElementUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CustomIdElementCreateOrConnectWithoutInventoryInput | CustomIdElementCreateOrConnectWithoutInventoryInput[]
    upsert?: CustomIdElementUpsertWithWhereUniqueWithoutInventoryInput | CustomIdElementUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: CustomIdElementCreateManyInventoryInputEnvelope
    set?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
    disconnect?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
    delete?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
    connect?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
    update?: CustomIdElementUpdateWithWhereUniqueWithoutInventoryInput | CustomIdElementUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: CustomIdElementUpdateManyWithWhereWithoutInventoryInput | CustomIdElementUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: CustomIdElementScalarWhereInput | CustomIdElementScalarWhereInput[]
  }

  export type ItemUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<ItemCreateWithoutInventoryInput, ItemUncheckedCreateWithoutInventoryInput> | ItemCreateWithoutInventoryInput[] | ItemUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutInventoryInput | ItemCreateOrConnectWithoutInventoryInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutInventoryInput | ItemUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: ItemCreateManyInventoryInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutInventoryInput | ItemUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutInventoryInput | ItemUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type InventoryTagUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryTagCreateWithoutInventoryInput, InventoryTagUncheckedCreateWithoutInventoryInput> | InventoryTagCreateWithoutInventoryInput[] | InventoryTagUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryTagCreateOrConnectWithoutInventoryInput | InventoryTagCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryTagUpsertWithWhereUniqueWithoutInventoryInput | InventoryTagUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryTagCreateManyInventoryInputEnvelope
    set?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    disconnect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    delete?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    connect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    update?: InventoryTagUpdateWithWhereUniqueWithoutInventoryInput | InventoryTagUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryTagUpdateManyWithWhereWithoutInventoryInput | InventoryTagUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryTagScalarWhereInput | InventoryTagScalarWhereInput[]
  }

  export type InventoryAccessUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryAccessCreateWithoutInventoryInput, InventoryAccessUncheckedCreateWithoutInventoryInput> | InventoryAccessCreateWithoutInventoryInput[] | InventoryAccessUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryAccessCreateOrConnectWithoutInventoryInput | InventoryAccessCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryAccessUpsertWithWhereUniqueWithoutInventoryInput | InventoryAccessUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryAccessCreateManyInventoryInputEnvelope
    set?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    disconnect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    delete?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    connect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    update?: InventoryAccessUpdateWithWhereUniqueWithoutInventoryInput | InventoryAccessUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryAccessUpdateManyWithWhereWithoutInventoryInput | InventoryAccessUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryAccessScalarWhereInput | InventoryAccessScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<CommentCreateWithoutInventoryInput, CommentUncheckedCreateWithoutInventoryInput> | CommentCreateWithoutInventoryInput[] | CommentUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutInventoryInput | CommentCreateOrConnectWithoutInventoryInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutInventoryInput | CommentUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: CommentCreateManyInventoryInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutInventoryInput | CommentUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutInventoryInput | CommentUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type SequenceUpdateOneWithoutInventoryNestedInput = {
    create?: XOR<SequenceCreateWithoutInventoryInput, SequenceUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: SequenceCreateOrConnectWithoutInventoryInput
    upsert?: SequenceUpsertWithoutInventoryInput
    disconnect?: SequenceWhereInput | boolean
    delete?: SequenceWhereInput | boolean
    connect?: SequenceWhereUniqueInput
    update?: XOR<XOR<SequenceUpdateToOneWithWhereWithoutInventoryInput, SequenceUpdateWithoutInventoryInput>, SequenceUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryFieldCreateWithoutInventoryInput, InventoryFieldUncheckedCreateWithoutInventoryInput> | InventoryFieldCreateWithoutInventoryInput[] | InventoryFieldUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryFieldCreateOrConnectWithoutInventoryInput | InventoryFieldCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryFieldUpsertWithWhereUniqueWithoutInventoryInput | InventoryFieldUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryFieldCreateManyInventoryInputEnvelope
    set?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
    disconnect?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
    delete?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
    connect?: InventoryFieldWhereUniqueInput | InventoryFieldWhereUniqueInput[]
    update?: InventoryFieldUpdateWithWhereUniqueWithoutInventoryInput | InventoryFieldUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryFieldUpdateManyWithWhereWithoutInventoryInput | InventoryFieldUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryFieldScalarWhereInput | InventoryFieldScalarWhereInput[]
  }

  export type CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<CustomIdElementCreateWithoutInventoryInput, CustomIdElementUncheckedCreateWithoutInventoryInput> | CustomIdElementCreateWithoutInventoryInput[] | CustomIdElementUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CustomIdElementCreateOrConnectWithoutInventoryInput | CustomIdElementCreateOrConnectWithoutInventoryInput[]
    upsert?: CustomIdElementUpsertWithWhereUniqueWithoutInventoryInput | CustomIdElementUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: CustomIdElementCreateManyInventoryInputEnvelope
    set?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
    disconnect?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
    delete?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
    connect?: CustomIdElementWhereUniqueInput | CustomIdElementWhereUniqueInput[]
    update?: CustomIdElementUpdateWithWhereUniqueWithoutInventoryInput | CustomIdElementUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: CustomIdElementUpdateManyWithWhereWithoutInventoryInput | CustomIdElementUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: CustomIdElementScalarWhereInput | CustomIdElementScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<ItemCreateWithoutInventoryInput, ItemUncheckedCreateWithoutInventoryInput> | ItemCreateWithoutInventoryInput[] | ItemUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutInventoryInput | ItemCreateOrConnectWithoutInventoryInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutInventoryInput | ItemUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: ItemCreateManyInventoryInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutInventoryInput | ItemUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutInventoryInput | ItemUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryTagCreateWithoutInventoryInput, InventoryTagUncheckedCreateWithoutInventoryInput> | InventoryTagCreateWithoutInventoryInput[] | InventoryTagUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryTagCreateOrConnectWithoutInventoryInput | InventoryTagCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryTagUpsertWithWhereUniqueWithoutInventoryInput | InventoryTagUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryTagCreateManyInventoryInputEnvelope
    set?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    disconnect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    delete?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    connect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    update?: InventoryTagUpdateWithWhereUniqueWithoutInventoryInput | InventoryTagUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryTagUpdateManyWithWhereWithoutInventoryInput | InventoryTagUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryTagScalarWhereInput | InventoryTagScalarWhereInput[]
  }

  export type InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryAccessCreateWithoutInventoryInput, InventoryAccessUncheckedCreateWithoutInventoryInput> | InventoryAccessCreateWithoutInventoryInput[] | InventoryAccessUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryAccessCreateOrConnectWithoutInventoryInput | InventoryAccessCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryAccessUpsertWithWhereUniqueWithoutInventoryInput | InventoryAccessUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryAccessCreateManyInventoryInputEnvelope
    set?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    disconnect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    delete?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    connect?: InventoryAccessWhereUniqueInput | InventoryAccessWhereUniqueInput[]
    update?: InventoryAccessUpdateWithWhereUniqueWithoutInventoryInput | InventoryAccessUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryAccessUpdateManyWithWhereWithoutInventoryInput | InventoryAccessUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryAccessScalarWhereInput | InventoryAccessScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<CommentCreateWithoutInventoryInput, CommentUncheckedCreateWithoutInventoryInput> | CommentCreateWithoutInventoryInput[] | CommentUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutInventoryInput | CommentCreateOrConnectWithoutInventoryInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutInventoryInput | CommentUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: CommentCreateManyInventoryInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutInventoryInput | CommentUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutInventoryInput | CommentUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type SequenceUncheckedUpdateOneWithoutInventoryNestedInput = {
    create?: XOR<SequenceCreateWithoutInventoryInput, SequenceUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: SequenceCreateOrConnectWithoutInventoryInput
    upsert?: SequenceUpsertWithoutInventoryInput
    disconnect?: SequenceWhereInput | boolean
    delete?: SequenceWhereInput | boolean
    connect?: SequenceWhereUniqueInput
    update?: XOR<XOR<SequenceUpdateToOneWithWhereWithoutInventoryInput, SequenceUpdateWithoutInventoryInput>, SequenceUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryCreateNestedOneWithoutFieldsInput = {
    create?: XOR<InventoryCreateWithoutFieldsInput, InventoryUncheckedCreateWithoutFieldsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutFieldsInput
    connect?: InventoryWhereUniqueInput
  }

  export type EnumFieldTypeFieldUpdateOperationsInput = {
    set?: $Enums.FieldType
  }

  export type InventoryUpdateOneRequiredWithoutFieldsNestedInput = {
    create?: XOR<InventoryCreateWithoutFieldsInput, InventoryUncheckedCreateWithoutFieldsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutFieldsInput
    upsert?: InventoryUpsertWithoutFieldsInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutFieldsInput, InventoryUpdateWithoutFieldsInput>, InventoryUncheckedUpdateWithoutFieldsInput>
  }

  export type InventoryCreateNestedOneWithoutIdElemsInput = {
    create?: XOR<InventoryCreateWithoutIdElemsInput, InventoryUncheckedCreateWithoutIdElemsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutIdElemsInput
    connect?: InventoryWhereUniqueInput
  }

  export type EnumIdElemTypeFieldUpdateOperationsInput = {
    set?: $Enums.IdElemType
  }

  export type InventoryUpdateOneRequiredWithoutIdElemsNestedInput = {
    create?: XOR<InventoryCreateWithoutIdElemsInput, InventoryUncheckedCreateWithoutIdElemsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutIdElemsInput
    upsert?: InventoryUpsertWithoutIdElemsInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutIdElemsInput, InventoryUpdateWithoutIdElemsInput>, InventoryUncheckedUpdateWithoutIdElemsInput>
  }

  export type InventoryCreateNestedOneWithoutSequenceInput = {
    create?: XOR<InventoryCreateWithoutSequenceInput, InventoryUncheckedCreateWithoutSequenceInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutSequenceInput
    connect?: InventoryWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutSequenceNestedInput = {
    create?: XOR<InventoryCreateWithoutSequenceInput, InventoryUncheckedCreateWithoutSequenceInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutSequenceInput
    upsert?: InventoryUpsertWithoutSequenceInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutSequenceInput, InventoryUpdateWithoutSequenceInput>, InventoryUncheckedUpdateWithoutSequenceInput>
  }

  export type InventoryCreateNestedOneWithoutItemsInput = {
    create?: XOR<InventoryCreateWithoutItemsInput, InventoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutItemsInput
    connect?: InventoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutItemsInput = {
    create?: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutItemsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutItemInput = {
    create?: XOR<CommentCreateWithoutItemInput, CommentUncheckedCreateWithoutItemInput> | CommentCreateWithoutItemInput[] | CommentUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutItemInput | CommentCreateOrConnectWithoutItemInput[]
    createMany?: CommentCreateManyItemInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutItemInput = {
    create?: XOR<LikeCreateWithoutItemInput, LikeUncheckedCreateWithoutItemInput> | LikeCreateWithoutItemInput[] | LikeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutItemInput | LikeCreateOrConnectWithoutItemInput[]
    createMany?: LikeCreateManyItemInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<CommentCreateWithoutItemInput, CommentUncheckedCreateWithoutItemInput> | CommentCreateWithoutItemInput[] | CommentUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutItemInput | CommentCreateOrConnectWithoutItemInput[]
    createMany?: CommentCreateManyItemInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<LikeCreateWithoutItemInput, LikeUncheckedCreateWithoutItemInput> | LikeCreateWithoutItemInput[] | LikeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutItemInput | LikeCreateOrConnectWithoutItemInput[]
    createMany?: LikeCreateManyItemInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type InventoryUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<InventoryCreateWithoutItemsInput, InventoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutItemsInput
    upsert?: InventoryUpsertWithoutItemsInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutItemsInput, InventoryUpdateWithoutItemsInput>, InventoryUncheckedUpdateWithoutItemsInput>
  }

  export type UserUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutItemsInput
    upsert?: UserUpsertWithoutItemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutItemsInput, UserUpdateWithoutItemsInput>, UserUncheckedUpdateWithoutItemsInput>
  }

  export type CommentUpdateManyWithoutItemNestedInput = {
    create?: XOR<CommentCreateWithoutItemInput, CommentUncheckedCreateWithoutItemInput> | CommentCreateWithoutItemInput[] | CommentUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutItemInput | CommentCreateOrConnectWithoutItemInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutItemInput | CommentUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: CommentCreateManyItemInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutItemInput | CommentUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutItemInput | CommentUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutItemNestedInput = {
    create?: XOR<LikeCreateWithoutItemInput, LikeUncheckedCreateWithoutItemInput> | LikeCreateWithoutItemInput[] | LikeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutItemInput | LikeCreateOrConnectWithoutItemInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutItemInput | LikeUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: LikeCreateManyItemInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutItemInput | LikeUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutItemInput | LikeUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<CommentCreateWithoutItemInput, CommentUncheckedCreateWithoutItemInput> | CommentCreateWithoutItemInput[] | CommentUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutItemInput | CommentCreateOrConnectWithoutItemInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutItemInput | CommentUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: CommentCreateManyItemInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutItemInput | CommentUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutItemInput | CommentUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<LikeCreateWithoutItemInput, LikeUncheckedCreateWithoutItemInput> | LikeCreateWithoutItemInput[] | LikeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutItemInput | LikeCreateOrConnectWithoutItemInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutItemInput | LikeUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: LikeCreateManyItemInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutItemInput | LikeUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutItemInput | LikeUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type InventoryCreateNestedOneWithoutCommentsInput = {
    create?: XOR<InventoryCreateWithoutCommentsInput, InventoryUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutCommentsInput
    connect?: InventoryWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ItemCreateWithoutCommentsInput, ItemUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutCommentsInput
    connect?: ItemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<InventoryCreateWithoutCommentsInput, InventoryUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutCommentsInput
    upsert?: InventoryUpsertWithoutCommentsInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutCommentsInput, InventoryUpdateWithoutCommentsInput>, InventoryUncheckedUpdateWithoutCommentsInput>
  }

  export type ItemUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<ItemCreateWithoutCommentsInput, ItemUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutCommentsInput
    upsert?: ItemUpsertWithoutCommentsInput
    disconnect?: ItemWhereInput | boolean
    delete?: ItemWhereInput | boolean
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutCommentsInput, ItemUpdateWithoutCommentsInput>, ItemUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type InventoryTagCreateNestedManyWithoutTagInput = {
    create?: XOR<InventoryTagCreateWithoutTagInput, InventoryTagUncheckedCreateWithoutTagInput> | InventoryTagCreateWithoutTagInput[] | InventoryTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: InventoryTagCreateOrConnectWithoutTagInput | InventoryTagCreateOrConnectWithoutTagInput[]
    createMany?: InventoryTagCreateManyTagInputEnvelope
    connect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
  }

  export type InventoryTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<InventoryTagCreateWithoutTagInput, InventoryTagUncheckedCreateWithoutTagInput> | InventoryTagCreateWithoutTagInput[] | InventoryTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: InventoryTagCreateOrConnectWithoutTagInput | InventoryTagCreateOrConnectWithoutTagInput[]
    createMany?: InventoryTagCreateManyTagInputEnvelope
    connect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
  }

  export type InventoryTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<InventoryTagCreateWithoutTagInput, InventoryTagUncheckedCreateWithoutTagInput> | InventoryTagCreateWithoutTagInput[] | InventoryTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: InventoryTagCreateOrConnectWithoutTagInput | InventoryTagCreateOrConnectWithoutTagInput[]
    upsert?: InventoryTagUpsertWithWhereUniqueWithoutTagInput | InventoryTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: InventoryTagCreateManyTagInputEnvelope
    set?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    disconnect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    delete?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    connect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    update?: InventoryTagUpdateWithWhereUniqueWithoutTagInput | InventoryTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: InventoryTagUpdateManyWithWhereWithoutTagInput | InventoryTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: InventoryTagScalarWhereInput | InventoryTagScalarWhereInput[]
  }

  export type InventoryTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<InventoryTagCreateWithoutTagInput, InventoryTagUncheckedCreateWithoutTagInput> | InventoryTagCreateWithoutTagInput[] | InventoryTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: InventoryTagCreateOrConnectWithoutTagInput | InventoryTagCreateOrConnectWithoutTagInput[]
    upsert?: InventoryTagUpsertWithWhereUniqueWithoutTagInput | InventoryTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: InventoryTagCreateManyTagInputEnvelope
    set?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    disconnect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    delete?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    connect?: InventoryTagWhereUniqueInput | InventoryTagWhereUniqueInput[]
    update?: InventoryTagUpdateWithWhereUniqueWithoutTagInput | InventoryTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: InventoryTagUpdateManyWithWhereWithoutTagInput | InventoryTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: InventoryTagScalarWhereInput | InventoryTagScalarWhereInput[]
  }

  export type InventoryCreateNestedOneWithoutTagsInput = {
    create?: XOR<InventoryCreateWithoutTagsInput, InventoryUncheckedCreateWithoutTagsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutTagsInput
    connect?: InventoryWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutInventoriesInput = {
    create?: XOR<TagCreateWithoutInventoriesInput, TagUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: TagCreateOrConnectWithoutInventoriesInput
    connect?: TagWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<InventoryCreateWithoutTagsInput, InventoryUncheckedCreateWithoutTagsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutTagsInput
    upsert?: InventoryUpsertWithoutTagsInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutTagsInput, InventoryUpdateWithoutTagsInput>, InventoryUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutInventoriesNestedInput = {
    create?: XOR<TagCreateWithoutInventoriesInput, TagUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: TagCreateOrConnectWithoutInventoriesInput
    upsert?: TagUpsertWithoutInventoriesInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutInventoriesInput, TagUpdateWithoutInventoriesInput>, TagUncheckedUpdateWithoutInventoriesInput>
  }

  export type InventoryCreateNestedOneWithoutAccessInput = {
    create?: XOR<InventoryCreateWithoutAccessInput, InventoryUncheckedCreateWithoutAccessInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutAccessInput
    connect?: InventoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAccessesInput = {
    create?: XOR<UserCreateWithoutAccessesInput, UserUncheckedCreateWithoutAccessesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccessesInput
    connect?: UserWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutAccessNestedInput = {
    create?: XOR<InventoryCreateWithoutAccessInput, InventoryUncheckedCreateWithoutAccessInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutAccessInput
    upsert?: InventoryUpsertWithoutAccessInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutAccessInput, InventoryUpdateWithoutAccessInput>, InventoryUncheckedUpdateWithoutAccessInput>
  }

  export type UserUpdateOneRequiredWithoutAccessesNestedInput = {
    create?: XOR<UserCreateWithoutAccessesInput, UserUncheckedCreateWithoutAccessesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccessesInput
    upsert?: UserUpsertWithoutAccessesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccessesInput, UserUpdateWithoutAccessesInput>, UserUncheckedUpdateWithoutAccessesInput>
  }

  export type ItemCreateNestedOneWithoutLikesInput = {
    create?: XOR<ItemCreateWithoutLikesInput, ItemUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutLikesInput
    connect?: ItemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLikesInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    connect?: UserWhereUniqueInput
  }

  export type ItemUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<ItemCreateWithoutLikesInput, ItemUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutLikesInput
    upsert?: ItemUpsertWithoutLikesInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutLikesInput, ItemUpdateWithoutLikesInput>, ItemUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    upsert?: UserUpsertWithoutLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikesInput, UserUpdateWithoutLikesInput>, UserUncheckedUpdateWithoutLikesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumFieldTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeFilter<$PrismaModel> | $Enums.FieldType
  }

  export type NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel> | $Enums.FieldType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeFilter<$PrismaModel>
  }

  export type NestedEnumIdElemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IdElemType | EnumIdElemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IdElemType[] | ListEnumIdElemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IdElemType[] | ListEnumIdElemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIdElemTypeFilter<$PrismaModel> | $Enums.IdElemType
  }

  export type NestedEnumIdElemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IdElemType | EnumIdElemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IdElemType[] | ListEnumIdElemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IdElemType[] | ListEnumIdElemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIdElemTypeWithAggregatesFilter<$PrismaModel> | $Enums.IdElemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIdElemTypeFilter<$PrismaModel>
    _max?: NestedEnumIdElemTypeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type InventoryCreateWithoutOwnerInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutInventoriesInput
    fields?: InventoryFieldCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementCreateNestedManyWithoutInventoryInput
    items?: ItemCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessCreateNestedManyWithoutInventoryInput
    comments?: CommentCreateNestedManyWithoutInventoryInput
    sequence?: SequenceCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutOwnerInput = {
    id?: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput
    items?: ItemUncheckedCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagUncheckedCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput
    comments?: CommentUncheckedCreateNestedManyWithoutInventoryInput
    sequence?: SequenceUncheckedCreateNestedOneWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutOwnerInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutOwnerInput, InventoryUncheckedCreateWithoutOwnerInput>
  }

  export type InventoryCreateManyOwnerInputEnvelope = {
    data: InventoryCreateManyOwnerInput | InventoryCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ItemCreateWithoutCreatedByInput = {
    id?: string
    customId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    inventory: InventoryCreateNestedOneWithoutItemsInput
    comments?: CommentCreateNestedManyWithoutItemInput
    likes?: LikeCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutCreatedByInput = {
    id?: string
    inventoryId: string
    customId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutItemInput
    likes?: LikeUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutCreatedByInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput>
  }

  export type ItemCreateManyCreatedByInputEnvelope = {
    data: ItemCreateManyCreatedByInput | ItemCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    body: string
    createdAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutCommentsInput
    item?: ItemCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    inventoryId: string
    itemId?: string | null
    body: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InventoryAccessCreateWithoutUserInput = {
    canWrite?: boolean
    inventory: InventoryCreateNestedOneWithoutAccessInput
  }

  export type InventoryAccessUncheckedCreateWithoutUserInput = {
    inventoryId: string
    canWrite?: boolean
  }

  export type InventoryAccessCreateOrConnectWithoutUserInput = {
    where: InventoryAccessWhereUniqueInput
    create: XOR<InventoryAccessCreateWithoutUserInput, InventoryAccessUncheckedCreateWithoutUserInput>
  }

  export type InventoryAccessCreateManyUserInputEnvelope = {
    data: InventoryAccessCreateManyUserInput | InventoryAccessCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    item: ItemCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutUserInput = {
    id?: string
    itemId: string
    createdAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutUserInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeCreateManyUserInputEnvelope = {
    data: LikeCreateManyUserInput | LikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InventoryUpsertWithWhereUniqueWithoutOwnerInput = {
    where: InventoryWhereUniqueInput
    update: XOR<InventoryUpdateWithoutOwnerInput, InventoryUncheckedUpdateWithoutOwnerInput>
    create: XOR<InventoryCreateWithoutOwnerInput, InventoryUncheckedCreateWithoutOwnerInput>
  }

  export type InventoryUpdateWithWhereUniqueWithoutOwnerInput = {
    where: InventoryWhereUniqueInput
    data: XOR<InventoryUpdateWithoutOwnerInput, InventoryUncheckedUpdateWithoutOwnerInput>
  }

  export type InventoryUpdateManyWithWhereWithoutOwnerInput = {
    where: InventoryScalarWhereInput
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyWithoutOwnerInput>
  }

  export type InventoryScalarWhereInput = {
    AND?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
    OR?: InventoryScalarWhereInput[]
    NOT?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
    id?: StringFilter<"Inventory"> | string
    ownerId?: StringFilter<"Inventory"> | string
    title?: StringFilter<"Inventory"> | string
    description?: StringFilter<"Inventory"> | string
    categoryId?: IntFilter<"Inventory"> | number
    imageUrl?: StringNullableFilter<"Inventory"> | string | null
    publicWrite?: BoolFilter<"Inventory"> | boolean
    version?: IntFilter<"Inventory"> | number
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeFilter<"Inventory"> | Date | string
  }

  export type ItemUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutCreatedByInput, ItemUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutCreatedByInput, ItemUncheckedUpdateWithoutCreatedByInput>
  }

  export type ItemUpdateManyWithWhereWithoutCreatedByInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    id?: StringFilter<"Item"> | string
    inventoryId?: StringFilter<"Item"> | string
    customId?: StringFilter<"Item"> | string
    createdById?: StringFilter<"Item"> | string
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    version?: IntFilter<"Item"> | number
    text1?: StringNullableFilter<"Item"> | string | null
    text2?: StringNullableFilter<"Item"> | string | null
    text3?: StringNullableFilter<"Item"> | string | null
    mtext1?: StringNullableFilter<"Item"> | string | null
    mtext2?: StringNullableFilter<"Item"> | string | null
    mtext3?: StringNullableFilter<"Item"> | string | null
    num1?: FloatNullableFilter<"Item"> | number | null
    num2?: FloatNullableFilter<"Item"> | number | null
    num3?: FloatNullableFilter<"Item"> | number | null
    link1?: StringNullableFilter<"Item"> | string | null
    link2?: StringNullableFilter<"Item"> | string | null
    link3?: StringNullableFilter<"Item"> | string | null
    bool1?: BoolNullableFilter<"Item"> | boolean | null
    bool2?: BoolNullableFilter<"Item"> | boolean | null
    bool3?: BoolNullableFilter<"Item"> | boolean | null
    img1?: StringNullableFilter<"Item"> | string | null
    img2?: StringNullableFilter<"Item"> | string | null
    img3?: StringNullableFilter<"Item"> | string | null
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    inventoryId?: StringFilter<"Comment"> | string
    itemId?: StringNullableFilter<"Comment"> | string | null
    userId?: StringFilter<"Comment"> | string
    body?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type InventoryAccessUpsertWithWhereUniqueWithoutUserInput = {
    where: InventoryAccessWhereUniqueInput
    update: XOR<InventoryAccessUpdateWithoutUserInput, InventoryAccessUncheckedUpdateWithoutUserInput>
    create: XOR<InventoryAccessCreateWithoutUserInput, InventoryAccessUncheckedCreateWithoutUserInput>
  }

  export type InventoryAccessUpdateWithWhereUniqueWithoutUserInput = {
    where: InventoryAccessWhereUniqueInput
    data: XOR<InventoryAccessUpdateWithoutUserInput, InventoryAccessUncheckedUpdateWithoutUserInput>
  }

  export type InventoryAccessUpdateManyWithWhereWithoutUserInput = {
    where: InventoryAccessScalarWhereInput
    data: XOR<InventoryAccessUpdateManyMutationInput, InventoryAccessUncheckedUpdateManyWithoutUserInput>
  }

  export type InventoryAccessScalarWhereInput = {
    AND?: InventoryAccessScalarWhereInput | InventoryAccessScalarWhereInput[]
    OR?: InventoryAccessScalarWhereInput[]
    NOT?: InventoryAccessScalarWhereInput | InventoryAccessScalarWhereInput[]
    inventoryId?: StringFilter<"InventoryAccess"> | string
    userId?: StringFilter<"InventoryAccess"> | string
    canWrite?: BoolFilter<"InventoryAccess"> | boolean
  }

  export type LikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
  }

  export type LikeUpdateManyWithWhereWithoutUserInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeScalarWhereInput = {
    AND?: LikeScalarWhereInput | LikeScalarWhereInput[]
    OR?: LikeScalarWhereInput[]
    NOT?: LikeScalarWhereInput | LikeScalarWhereInput[]
    id?: StringFilter<"Like"> | string
    itemId?: StringFilter<"Like"> | string
    userId?: StringFilter<"Like"> | string
    createdAt?: DateTimeFilter<"Like"> | Date | string
  }

  export type InventoryCreateWithoutCategoryInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutInventoriesInput
    fields?: InventoryFieldCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementCreateNestedManyWithoutInventoryInput
    items?: ItemCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessCreateNestedManyWithoutInventoryInput
    comments?: CommentCreateNestedManyWithoutInventoryInput
    sequence?: SequenceCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput
    items?: ItemUncheckedCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagUncheckedCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput
    comments?: CommentUncheckedCreateNestedManyWithoutInventoryInput
    sequence?: SequenceUncheckedCreateNestedOneWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutCategoryInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput>
  }

  export type InventoryCreateManyCategoryInputEnvelope = {
    data: InventoryCreateManyCategoryInput | InventoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type InventoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: InventoryWhereUniqueInput
    update: XOR<InventoryUpdateWithoutCategoryInput, InventoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput>
  }

  export type InventoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: InventoryWhereUniqueInput
    data: XOR<InventoryUpdateWithoutCategoryInput, InventoryUncheckedUpdateWithoutCategoryInput>
  }

  export type InventoryUpdateManyWithWhereWithoutCategoryInput = {
    where: InventoryScalarWhereInput
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type UserCreateWithoutInventoriesInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    items?: ItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    accesses?: InventoryAccessCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInventoriesInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    items?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    accesses?: InventoryAccessUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInventoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInventoriesInput, UserUncheckedCreateWithoutInventoriesInput>
  }

  export type CategoryCreateWithoutInventoriesInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutInventoriesInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutInventoriesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutInventoriesInput, CategoryUncheckedCreateWithoutInventoriesInput>
  }

  export type InventoryFieldCreateWithoutInventoryInput = {
    id?: string
    type: $Enums.FieldType
    slot: number
    title: string
    description?: string | null
    showInTable?: boolean
    displayOrder?: number
  }

  export type InventoryFieldUncheckedCreateWithoutInventoryInput = {
    id?: string
    type: $Enums.FieldType
    slot: number
    title: string
    description?: string | null
    showInTable?: boolean
    displayOrder?: number
  }

  export type InventoryFieldCreateOrConnectWithoutInventoryInput = {
    where: InventoryFieldWhereUniqueInput
    create: XOR<InventoryFieldCreateWithoutInventoryInput, InventoryFieldUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryFieldCreateManyInventoryInputEnvelope = {
    data: InventoryFieldCreateManyInventoryInput | InventoryFieldCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type CustomIdElementCreateWithoutInventoryInput = {
    id?: string
    order: number
    type: $Enums.IdElemType
    param?: string | null
  }

  export type CustomIdElementUncheckedCreateWithoutInventoryInput = {
    id?: string
    order: number
    type: $Enums.IdElemType
    param?: string | null
  }

  export type CustomIdElementCreateOrConnectWithoutInventoryInput = {
    where: CustomIdElementWhereUniqueInput
    create: XOR<CustomIdElementCreateWithoutInventoryInput, CustomIdElementUncheckedCreateWithoutInventoryInput>
  }

  export type CustomIdElementCreateManyInventoryInputEnvelope = {
    data: CustomIdElementCreateManyInventoryInput | CustomIdElementCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type ItemCreateWithoutInventoryInput = {
    id?: string
    customId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    createdBy: UserCreateNestedOneWithoutItemsInput
    comments?: CommentCreateNestedManyWithoutItemInput
    likes?: LikeCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutInventoryInput = {
    id?: string
    customId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutItemInput
    likes?: LikeUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutInventoryInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutInventoryInput, ItemUncheckedCreateWithoutInventoryInput>
  }

  export type ItemCreateManyInventoryInputEnvelope = {
    data: ItemCreateManyInventoryInput | ItemCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type InventoryTagCreateWithoutInventoryInput = {
    tag: TagCreateNestedOneWithoutInventoriesInput
  }

  export type InventoryTagUncheckedCreateWithoutInventoryInput = {
    tagId: number
  }

  export type InventoryTagCreateOrConnectWithoutInventoryInput = {
    where: InventoryTagWhereUniqueInput
    create: XOR<InventoryTagCreateWithoutInventoryInput, InventoryTagUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryTagCreateManyInventoryInputEnvelope = {
    data: InventoryTagCreateManyInventoryInput | InventoryTagCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type InventoryAccessCreateWithoutInventoryInput = {
    canWrite?: boolean
    user: UserCreateNestedOneWithoutAccessesInput
  }

  export type InventoryAccessUncheckedCreateWithoutInventoryInput = {
    userId: string
    canWrite?: boolean
  }

  export type InventoryAccessCreateOrConnectWithoutInventoryInput = {
    where: InventoryAccessWhereUniqueInput
    create: XOR<InventoryAccessCreateWithoutInventoryInput, InventoryAccessUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryAccessCreateManyInventoryInputEnvelope = {
    data: InventoryAccessCreateManyInventoryInput | InventoryAccessCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutInventoryInput = {
    id?: string
    body: string
    createdAt?: Date | string
    item?: ItemCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutInventoryInput = {
    id?: string
    itemId?: string | null
    userId: string
    body: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutInventoryInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutInventoryInput, CommentUncheckedCreateWithoutInventoryInput>
  }

  export type CommentCreateManyInventoryInputEnvelope = {
    data: CommentCreateManyInventoryInput | CommentCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type SequenceCreateWithoutInventoryInput = {
    value?: number
  }

  export type SequenceUncheckedCreateWithoutInventoryInput = {
    value?: number
  }

  export type SequenceCreateOrConnectWithoutInventoryInput = {
    where: SequenceWhereUniqueInput
    create: XOR<SequenceCreateWithoutInventoryInput, SequenceUncheckedCreateWithoutInventoryInput>
  }

  export type UserUpsertWithoutInventoriesInput = {
    update: XOR<UserUpdateWithoutInventoriesInput, UserUncheckedUpdateWithoutInventoriesInput>
    create: XOR<UserCreateWithoutInventoriesInput, UserUncheckedCreateWithoutInventoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInventoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInventoriesInput, UserUncheckedUpdateWithoutInventoriesInput>
  }

  export type UserUpdateWithoutInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    accesses?: InventoryAccessUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    accesses?: InventoryAccessUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryUpsertWithoutInventoriesInput = {
    update: XOR<CategoryUpdateWithoutInventoriesInput, CategoryUncheckedUpdateWithoutInventoriesInput>
    create: XOR<CategoryCreateWithoutInventoriesInput, CategoryUncheckedCreateWithoutInventoriesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutInventoriesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutInventoriesInput, CategoryUncheckedUpdateWithoutInventoriesInput>
  }

  export type CategoryUpdateWithoutInventoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutInventoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InventoryFieldUpsertWithWhereUniqueWithoutInventoryInput = {
    where: InventoryFieldWhereUniqueInput
    update: XOR<InventoryFieldUpdateWithoutInventoryInput, InventoryFieldUncheckedUpdateWithoutInventoryInput>
    create: XOR<InventoryFieldCreateWithoutInventoryInput, InventoryFieldUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryFieldUpdateWithWhereUniqueWithoutInventoryInput = {
    where: InventoryFieldWhereUniqueInput
    data: XOR<InventoryFieldUpdateWithoutInventoryInput, InventoryFieldUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryFieldUpdateManyWithWhereWithoutInventoryInput = {
    where: InventoryFieldScalarWhereInput
    data: XOR<InventoryFieldUpdateManyMutationInput, InventoryFieldUncheckedUpdateManyWithoutInventoryInput>
  }

  export type InventoryFieldScalarWhereInput = {
    AND?: InventoryFieldScalarWhereInput | InventoryFieldScalarWhereInput[]
    OR?: InventoryFieldScalarWhereInput[]
    NOT?: InventoryFieldScalarWhereInput | InventoryFieldScalarWhereInput[]
    id?: StringFilter<"InventoryField"> | string
    inventoryId?: StringFilter<"InventoryField"> | string
    type?: EnumFieldTypeFilter<"InventoryField"> | $Enums.FieldType
    slot?: IntFilter<"InventoryField"> | number
    title?: StringFilter<"InventoryField"> | string
    description?: StringNullableFilter<"InventoryField"> | string | null
    showInTable?: BoolFilter<"InventoryField"> | boolean
    displayOrder?: IntFilter<"InventoryField"> | number
  }

  export type CustomIdElementUpsertWithWhereUniqueWithoutInventoryInput = {
    where: CustomIdElementWhereUniqueInput
    update: XOR<CustomIdElementUpdateWithoutInventoryInput, CustomIdElementUncheckedUpdateWithoutInventoryInput>
    create: XOR<CustomIdElementCreateWithoutInventoryInput, CustomIdElementUncheckedCreateWithoutInventoryInput>
  }

  export type CustomIdElementUpdateWithWhereUniqueWithoutInventoryInput = {
    where: CustomIdElementWhereUniqueInput
    data: XOR<CustomIdElementUpdateWithoutInventoryInput, CustomIdElementUncheckedUpdateWithoutInventoryInput>
  }

  export type CustomIdElementUpdateManyWithWhereWithoutInventoryInput = {
    where: CustomIdElementScalarWhereInput
    data: XOR<CustomIdElementUpdateManyMutationInput, CustomIdElementUncheckedUpdateManyWithoutInventoryInput>
  }

  export type CustomIdElementScalarWhereInput = {
    AND?: CustomIdElementScalarWhereInput | CustomIdElementScalarWhereInput[]
    OR?: CustomIdElementScalarWhereInput[]
    NOT?: CustomIdElementScalarWhereInput | CustomIdElementScalarWhereInput[]
    id?: StringFilter<"CustomIdElement"> | string
    inventoryId?: StringFilter<"CustomIdElement"> | string
    order?: IntFilter<"CustomIdElement"> | number
    type?: EnumIdElemTypeFilter<"CustomIdElement"> | $Enums.IdElemType
    param?: StringNullableFilter<"CustomIdElement"> | string | null
  }

  export type ItemUpsertWithWhereUniqueWithoutInventoryInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutInventoryInput, ItemUncheckedUpdateWithoutInventoryInput>
    create: XOR<ItemCreateWithoutInventoryInput, ItemUncheckedCreateWithoutInventoryInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutInventoryInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutInventoryInput, ItemUncheckedUpdateWithoutInventoryInput>
  }

  export type ItemUpdateManyWithWhereWithoutInventoryInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutInventoryInput>
  }

  export type InventoryTagUpsertWithWhereUniqueWithoutInventoryInput = {
    where: InventoryTagWhereUniqueInput
    update: XOR<InventoryTagUpdateWithoutInventoryInput, InventoryTagUncheckedUpdateWithoutInventoryInput>
    create: XOR<InventoryTagCreateWithoutInventoryInput, InventoryTagUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryTagUpdateWithWhereUniqueWithoutInventoryInput = {
    where: InventoryTagWhereUniqueInput
    data: XOR<InventoryTagUpdateWithoutInventoryInput, InventoryTagUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryTagUpdateManyWithWhereWithoutInventoryInput = {
    where: InventoryTagScalarWhereInput
    data: XOR<InventoryTagUpdateManyMutationInput, InventoryTagUncheckedUpdateManyWithoutInventoryInput>
  }

  export type InventoryTagScalarWhereInput = {
    AND?: InventoryTagScalarWhereInput | InventoryTagScalarWhereInput[]
    OR?: InventoryTagScalarWhereInput[]
    NOT?: InventoryTagScalarWhereInput | InventoryTagScalarWhereInput[]
    inventoryId?: StringFilter<"InventoryTag"> | string
    tagId?: IntFilter<"InventoryTag"> | number
  }

  export type InventoryAccessUpsertWithWhereUniqueWithoutInventoryInput = {
    where: InventoryAccessWhereUniqueInput
    update: XOR<InventoryAccessUpdateWithoutInventoryInput, InventoryAccessUncheckedUpdateWithoutInventoryInput>
    create: XOR<InventoryAccessCreateWithoutInventoryInput, InventoryAccessUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryAccessUpdateWithWhereUniqueWithoutInventoryInput = {
    where: InventoryAccessWhereUniqueInput
    data: XOR<InventoryAccessUpdateWithoutInventoryInput, InventoryAccessUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryAccessUpdateManyWithWhereWithoutInventoryInput = {
    where: InventoryAccessScalarWhereInput
    data: XOR<InventoryAccessUpdateManyMutationInput, InventoryAccessUncheckedUpdateManyWithoutInventoryInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutInventoryInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutInventoryInput, CommentUncheckedUpdateWithoutInventoryInput>
    create: XOR<CommentCreateWithoutInventoryInput, CommentUncheckedCreateWithoutInventoryInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutInventoryInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutInventoryInput, CommentUncheckedUpdateWithoutInventoryInput>
  }

  export type CommentUpdateManyWithWhereWithoutInventoryInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutInventoryInput>
  }

  export type SequenceUpsertWithoutInventoryInput = {
    update: XOR<SequenceUpdateWithoutInventoryInput, SequenceUncheckedUpdateWithoutInventoryInput>
    create: XOR<SequenceCreateWithoutInventoryInput, SequenceUncheckedCreateWithoutInventoryInput>
    where?: SequenceWhereInput
  }

  export type SequenceUpdateToOneWithWhereWithoutInventoryInput = {
    where?: SequenceWhereInput
    data: XOR<SequenceUpdateWithoutInventoryInput, SequenceUncheckedUpdateWithoutInventoryInput>
  }

  export type SequenceUpdateWithoutInventoryInput = {
    value?: IntFieldUpdateOperationsInput | number
  }

  export type SequenceUncheckedUpdateWithoutInventoryInput = {
    value?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCreateWithoutFieldsInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutInventoriesInput
    category: CategoryCreateNestedOneWithoutInventoriesInput
    idElems?: CustomIdElementCreateNestedManyWithoutInventoryInput
    items?: ItemCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessCreateNestedManyWithoutInventoryInput
    comments?: CommentCreateNestedManyWithoutInventoryInput
    sequence?: SequenceCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutFieldsInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    idElems?: CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput
    items?: ItemUncheckedCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagUncheckedCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput
    comments?: CommentUncheckedCreateNestedManyWithoutInventoryInput
    sequence?: SequenceUncheckedCreateNestedOneWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutFieldsInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutFieldsInput, InventoryUncheckedCreateWithoutFieldsInput>
  }

  export type InventoryUpsertWithoutFieldsInput = {
    update: XOR<InventoryUpdateWithoutFieldsInput, InventoryUncheckedUpdateWithoutFieldsInput>
    create: XOR<InventoryCreateWithoutFieldsInput, InventoryUncheckedCreateWithoutFieldsInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutFieldsInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutFieldsInput, InventoryUncheckedUpdateWithoutFieldsInput>
  }

  export type InventoryUpdateWithoutFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutInventoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutInventoriesNestedInput
    idElems?: CustomIdElementUpdateManyWithoutInventoryNestedInput
    items?: ItemUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUpdateManyWithoutInventoryNestedInput
    comments?: CommentUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idElems?: CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUncheckedUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryCreateWithoutIdElemsInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutInventoriesInput
    category: CategoryCreateNestedOneWithoutInventoriesInput
    fields?: InventoryFieldCreateNestedManyWithoutInventoryInput
    items?: ItemCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessCreateNestedManyWithoutInventoryInput
    comments?: CommentCreateNestedManyWithoutInventoryInput
    sequence?: SequenceCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutIdElemsInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput
    items?: ItemUncheckedCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagUncheckedCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput
    comments?: CommentUncheckedCreateNestedManyWithoutInventoryInput
    sequence?: SequenceUncheckedCreateNestedOneWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutIdElemsInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutIdElemsInput, InventoryUncheckedCreateWithoutIdElemsInput>
  }

  export type InventoryUpsertWithoutIdElemsInput = {
    update: XOR<InventoryUpdateWithoutIdElemsInput, InventoryUncheckedUpdateWithoutIdElemsInput>
    create: XOR<InventoryCreateWithoutIdElemsInput, InventoryUncheckedCreateWithoutIdElemsInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutIdElemsInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutIdElemsInput, InventoryUncheckedUpdateWithoutIdElemsInput>
  }

  export type InventoryUpdateWithoutIdElemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutInventoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutInventoriesNestedInput
    fields?: InventoryFieldUpdateManyWithoutInventoryNestedInput
    items?: ItemUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUpdateManyWithoutInventoryNestedInput
    comments?: CommentUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutIdElemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUncheckedUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryCreateWithoutSequenceInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutInventoriesInput
    category: CategoryCreateNestedOneWithoutInventoriesInput
    fields?: InventoryFieldCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementCreateNestedManyWithoutInventoryInput
    items?: ItemCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessCreateNestedManyWithoutInventoryInput
    comments?: CommentCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutSequenceInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput
    items?: ItemUncheckedCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagUncheckedCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput
    comments?: CommentUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutSequenceInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutSequenceInput, InventoryUncheckedCreateWithoutSequenceInput>
  }

  export type InventoryUpsertWithoutSequenceInput = {
    update: XOR<InventoryUpdateWithoutSequenceInput, InventoryUncheckedUpdateWithoutSequenceInput>
    create: XOR<InventoryCreateWithoutSequenceInput, InventoryUncheckedCreateWithoutSequenceInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutSequenceInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutSequenceInput, InventoryUncheckedUpdateWithoutSequenceInput>
  }

  export type InventoryUpdateWithoutSequenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutInventoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutInventoriesNestedInput
    fields?: InventoryFieldUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUpdateManyWithoutInventoryNestedInput
    items?: ItemUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUpdateManyWithoutInventoryNestedInput
    comments?: CommentUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutSequenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryCreateWithoutItemsInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutInventoriesInput
    category: CategoryCreateNestedOneWithoutInventoriesInput
    fields?: InventoryFieldCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessCreateNestedManyWithoutInventoryInput
    comments?: CommentCreateNestedManyWithoutInventoryInput
    sequence?: SequenceCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutItemsInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagUncheckedCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput
    comments?: CommentUncheckedCreateNestedManyWithoutInventoryInput
    sequence?: SequenceUncheckedCreateNestedOneWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutItemsInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutItemsInput, InventoryUncheckedCreateWithoutItemsInput>
  }

  export type UserCreateWithoutItemsInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryCreateNestedManyWithoutOwnerInput
    comments?: CommentCreateNestedManyWithoutUserInput
    accesses?: InventoryAccessCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutItemsInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryUncheckedCreateNestedManyWithoutOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    accesses?: InventoryAccessUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
  }

  export type CommentCreateWithoutItemInput = {
    id?: string
    body: string
    createdAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutItemInput = {
    id?: string
    inventoryId: string
    userId: string
    body: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutItemInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutItemInput, CommentUncheckedCreateWithoutItemInput>
  }

  export type CommentCreateManyItemInputEnvelope = {
    data: CommentCreateManyItemInput | CommentCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutItemInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutItemInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutItemInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutItemInput, LikeUncheckedCreateWithoutItemInput>
  }

  export type LikeCreateManyItemInputEnvelope = {
    data: LikeCreateManyItemInput | LikeCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type InventoryUpsertWithoutItemsInput = {
    update: XOR<InventoryUpdateWithoutItemsInput, InventoryUncheckedUpdateWithoutItemsInput>
    create: XOR<InventoryCreateWithoutItemsInput, InventoryUncheckedCreateWithoutItemsInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutItemsInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutItemsInput, InventoryUncheckedUpdateWithoutItemsInput>
  }

  export type InventoryUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutInventoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutInventoriesNestedInput
    fields?: InventoryFieldUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUpdateManyWithoutInventoryNestedInput
    comments?: CommentUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUncheckedUpdateOneWithoutInventoryNestedInput
  }

  export type UserUpsertWithoutItemsInput = {
    update: XOR<UserUpdateWithoutItemsInput, UserUncheckedUpdateWithoutItemsInput>
    create: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutItemsInput, UserUncheckedUpdateWithoutItemsInput>
  }

  export type UserUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUpdateManyWithoutOwnerNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    accesses?: InventoryAccessUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUncheckedUpdateManyWithoutOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    accesses?: InventoryAccessUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutItemInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutItemInput, CommentUncheckedUpdateWithoutItemInput>
    create: XOR<CommentCreateWithoutItemInput, CommentUncheckedCreateWithoutItemInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutItemInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutItemInput, CommentUncheckedUpdateWithoutItemInput>
  }

  export type CommentUpdateManyWithWhereWithoutItemInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutItemInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutItemInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutItemInput, LikeUncheckedUpdateWithoutItemInput>
    create: XOR<LikeCreateWithoutItemInput, LikeUncheckedCreateWithoutItemInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutItemInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutItemInput, LikeUncheckedUpdateWithoutItemInput>
  }

  export type LikeUpdateManyWithWhereWithoutItemInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutItemInput>
  }

  export type InventoryCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutInventoriesInput
    category: CategoryCreateNestedOneWithoutInventoriesInput
    fields?: InventoryFieldCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementCreateNestedManyWithoutInventoryInput
    items?: ItemCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessCreateNestedManyWithoutInventoryInput
    sequence?: SequenceCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutCommentsInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput
    items?: ItemUncheckedCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagUncheckedCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput
    sequence?: SequenceUncheckedCreateNestedOneWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutCommentsInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutCommentsInput, InventoryUncheckedCreateWithoutCommentsInput>
  }

  export type ItemCreateWithoutCommentsInput = {
    id?: string
    customId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    inventory: InventoryCreateNestedOneWithoutItemsInput
    createdBy: UserCreateNestedOneWithoutItemsInput
    likes?: LikeCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutCommentsInput = {
    id?: string
    inventoryId: string
    customId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    likes?: LikeUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutCommentsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutCommentsInput, ItemUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryCreateNestedManyWithoutOwnerInput
    items?: ItemCreateNestedManyWithoutCreatedByInput
    accesses?: InventoryAccessCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryUncheckedCreateNestedManyWithoutOwnerInput
    items?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    accesses?: InventoryAccessUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type InventoryUpsertWithoutCommentsInput = {
    update: XOR<InventoryUpdateWithoutCommentsInput, InventoryUncheckedUpdateWithoutCommentsInput>
    create: XOR<InventoryCreateWithoutCommentsInput, InventoryUncheckedCreateWithoutCommentsInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutCommentsInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutCommentsInput, InventoryUncheckedUpdateWithoutCommentsInput>
  }

  export type InventoryUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutInventoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutInventoriesNestedInput
    fields?: InventoryFieldUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUpdateManyWithoutInventoryNestedInput
    items?: ItemUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUncheckedUpdateOneWithoutInventoryNestedInput
  }

  export type ItemUpsertWithoutCommentsInput = {
    update: XOR<ItemUpdateWithoutCommentsInput, ItemUncheckedUpdateWithoutCommentsInput>
    create: XOR<ItemCreateWithoutCommentsInput, ItemUncheckedCreateWithoutCommentsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutCommentsInput, ItemUncheckedUpdateWithoutCommentsInput>
  }

  export type ItemUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateOneRequiredWithoutItemsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutItemsNestedInput
    likes?: LikeUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: LikeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUpdateManyWithoutOwnerNestedInput
    items?: ItemUpdateManyWithoutCreatedByNestedInput
    accesses?: InventoryAccessUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUncheckedUpdateManyWithoutOwnerNestedInput
    items?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    accesses?: InventoryAccessUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InventoryTagCreateWithoutTagInput = {
    inventory: InventoryCreateNestedOneWithoutTagsInput
  }

  export type InventoryTagUncheckedCreateWithoutTagInput = {
    inventoryId: string
  }

  export type InventoryTagCreateOrConnectWithoutTagInput = {
    where: InventoryTagWhereUniqueInput
    create: XOR<InventoryTagCreateWithoutTagInput, InventoryTagUncheckedCreateWithoutTagInput>
  }

  export type InventoryTagCreateManyTagInputEnvelope = {
    data: InventoryTagCreateManyTagInput | InventoryTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type InventoryTagUpsertWithWhereUniqueWithoutTagInput = {
    where: InventoryTagWhereUniqueInput
    update: XOR<InventoryTagUpdateWithoutTagInput, InventoryTagUncheckedUpdateWithoutTagInput>
    create: XOR<InventoryTagCreateWithoutTagInput, InventoryTagUncheckedCreateWithoutTagInput>
  }

  export type InventoryTagUpdateWithWhereUniqueWithoutTagInput = {
    where: InventoryTagWhereUniqueInput
    data: XOR<InventoryTagUpdateWithoutTagInput, InventoryTagUncheckedUpdateWithoutTagInput>
  }

  export type InventoryTagUpdateManyWithWhereWithoutTagInput = {
    where: InventoryTagScalarWhereInput
    data: XOR<InventoryTagUpdateManyMutationInput, InventoryTagUncheckedUpdateManyWithoutTagInput>
  }

  export type InventoryCreateWithoutTagsInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutInventoriesInput
    category: CategoryCreateNestedOneWithoutInventoriesInput
    fields?: InventoryFieldCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementCreateNestedManyWithoutInventoryInput
    items?: ItemCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessCreateNestedManyWithoutInventoryInput
    comments?: CommentCreateNestedManyWithoutInventoryInput
    sequence?: SequenceCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutTagsInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput
    items?: ItemUncheckedCreateNestedManyWithoutInventoryInput
    access?: InventoryAccessUncheckedCreateNestedManyWithoutInventoryInput
    comments?: CommentUncheckedCreateNestedManyWithoutInventoryInput
    sequence?: SequenceUncheckedCreateNestedOneWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutTagsInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutTagsInput, InventoryUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutInventoriesInput = {
    name: string
  }

  export type TagUncheckedCreateWithoutInventoriesInput = {
    id?: number
    name: string
  }

  export type TagCreateOrConnectWithoutInventoriesInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutInventoriesInput, TagUncheckedCreateWithoutInventoriesInput>
  }

  export type InventoryUpsertWithoutTagsInput = {
    update: XOR<InventoryUpdateWithoutTagsInput, InventoryUncheckedUpdateWithoutTagsInput>
    create: XOR<InventoryCreateWithoutTagsInput, InventoryUncheckedCreateWithoutTagsInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutTagsInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutTagsInput, InventoryUncheckedUpdateWithoutTagsInput>
  }

  export type InventoryUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutInventoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutInventoriesNestedInput
    fields?: InventoryFieldUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUpdateManyWithoutInventoryNestedInput
    items?: ItemUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUpdateManyWithoutInventoryNestedInput
    comments?: CommentUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUncheckedUpdateOneWithoutInventoryNestedInput
  }

  export type TagUpsertWithoutInventoriesInput = {
    update: XOR<TagUpdateWithoutInventoriesInput, TagUncheckedUpdateWithoutInventoriesInput>
    create: XOR<TagCreateWithoutInventoriesInput, TagUncheckedCreateWithoutInventoriesInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutInventoriesInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutInventoriesInput, TagUncheckedUpdateWithoutInventoriesInput>
  }

  export type TagUpdateWithoutInventoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutInventoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InventoryCreateWithoutAccessInput = {
    id?: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutInventoriesInput
    category: CategoryCreateNestedOneWithoutInventoriesInput
    fields?: InventoryFieldCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementCreateNestedManyWithoutInventoryInput
    items?: ItemCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagCreateNestedManyWithoutInventoryInput
    comments?: CommentCreateNestedManyWithoutInventoryInput
    sequence?: SequenceCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutAccessInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fields?: InventoryFieldUncheckedCreateNestedManyWithoutInventoryInput
    idElems?: CustomIdElementUncheckedCreateNestedManyWithoutInventoryInput
    items?: ItemUncheckedCreateNestedManyWithoutInventoryInput
    tags?: InventoryTagUncheckedCreateNestedManyWithoutInventoryInput
    comments?: CommentUncheckedCreateNestedManyWithoutInventoryInput
    sequence?: SequenceUncheckedCreateNestedOneWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutAccessInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutAccessInput, InventoryUncheckedCreateWithoutAccessInput>
  }

  export type UserCreateWithoutAccessesInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryCreateNestedManyWithoutOwnerInput
    items?: ItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccessesInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryUncheckedCreateNestedManyWithoutOwnerInput
    items?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccessesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccessesInput, UserUncheckedCreateWithoutAccessesInput>
  }

  export type InventoryUpsertWithoutAccessInput = {
    update: XOR<InventoryUpdateWithoutAccessInput, InventoryUncheckedUpdateWithoutAccessInput>
    create: XOR<InventoryCreateWithoutAccessInput, InventoryUncheckedCreateWithoutAccessInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutAccessInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutAccessInput, InventoryUncheckedUpdateWithoutAccessInput>
  }

  export type InventoryUpdateWithoutAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutInventoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutInventoriesNestedInput
    fields?: InventoryFieldUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUpdateManyWithoutInventoryNestedInput
    items?: ItemUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUpdateManyWithoutInventoryNestedInput
    comments?: CommentUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUncheckedUpdateOneWithoutInventoryNestedInput
  }

  export type UserUpsertWithoutAccessesInput = {
    update: XOR<UserUpdateWithoutAccessesInput, UserUncheckedUpdateWithoutAccessesInput>
    create: XOR<UserCreateWithoutAccessesInput, UserUncheckedCreateWithoutAccessesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccessesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccessesInput, UserUncheckedUpdateWithoutAccessesInput>
  }

  export type UserUpdateWithoutAccessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUpdateManyWithoutOwnerNestedInput
    items?: ItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUncheckedUpdateManyWithoutOwnerNestedInput
    items?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemCreateWithoutLikesInput = {
    id?: string
    customId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    inventory: InventoryCreateNestedOneWithoutItemsInput
    createdBy: UserCreateNestedOneWithoutItemsInput
    comments?: CommentCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutLikesInput = {
    id?: string
    inventoryId: string
    customId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutLikesInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutLikesInput, ItemUncheckedCreateWithoutLikesInput>
  }

  export type UserCreateWithoutLikesInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryCreateNestedManyWithoutOwnerInput
    items?: ItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    accesses?: InventoryAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikesInput = {
    id?: string
    email: string
    name: string
    avatar?: string | null
    provider?: string | null
    providerId?: string | null
    roles?: UserCreaterolesInput | string[]
    blocked?: boolean
    createdAt?: Date | string
    password?: string | null
    inventories?: InventoryUncheckedCreateNestedManyWithoutOwnerInput
    items?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    accesses?: InventoryAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
  }

  export type ItemUpsertWithoutLikesInput = {
    update: XOR<ItemUpdateWithoutLikesInput, ItemUncheckedUpdateWithoutLikesInput>
    create: XOR<ItemCreateWithoutLikesInput, ItemUncheckedCreateWithoutLikesInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutLikesInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutLikesInput, ItemUncheckedUpdateWithoutLikesInput>
  }

  export type ItemUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateOneRequiredWithoutItemsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutItemsNestedInput
    comments?: CommentUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutItemNestedInput
  }

  export type UserUpsertWithoutLikesInput = {
    update: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUpdateManyWithoutOwnerNestedInput
    items?: ItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    accesses?: InventoryAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | string[]
    blocked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inventories?: InventoryUncheckedUpdateManyWithoutOwnerNestedInput
    items?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    accesses?: InventoryAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InventoryCreateManyOwnerInput = {
    id?: string
    title: string
    description?: string
    categoryId: number
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemCreateManyCreatedByInput = {
    id?: string
    inventoryId: string
    customId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
  }

  export type CommentCreateManyUserInput = {
    id?: string
    inventoryId: string
    itemId?: string | null
    body: string
    createdAt?: Date | string
  }

  export type InventoryAccessCreateManyUserInput = {
    inventoryId: string
    canWrite?: boolean
  }

  export type LikeCreateManyUserInput = {
    id?: string
    itemId: string
    createdAt?: Date | string
  }

  export type InventoryUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutInventoriesNestedInput
    fields?: InventoryFieldUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUpdateManyWithoutInventoryNestedInput
    items?: ItemUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUpdateManyWithoutInventoryNestedInput
    comments?: CommentUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUncheckedUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateOneRequiredWithoutItemsNestedInput
    comments?: CommentUpdateManyWithoutItemNestedInput
    likes?: LikeUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutItemNestedInput
    likes?: LikeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutCommentsNestedInput
    item?: ItemUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryAccessUpdateWithoutUserInput = {
    canWrite?: BoolFieldUpdateOperationsInput | boolean
    inventory?: InventoryUpdateOneRequiredWithoutAccessNestedInput
  }

  export type InventoryAccessUncheckedUpdateWithoutUserInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
    canWrite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryAccessUncheckedUpdateManyWithoutUserInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
    canWrite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryCreateManyCategoryInput = {
    id?: string
    ownerId: string
    title: string
    description?: string
    imageUrl?: string | null
    publicWrite?: boolean
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutInventoriesNestedInput
    fields?: InventoryFieldUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUpdateManyWithoutInventoryNestedInput
    items?: ItemUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUpdateManyWithoutInventoryNestedInput
    comments?: CommentUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fields?: InventoryFieldUncheckedUpdateManyWithoutInventoryNestedInput
    idElems?: CustomIdElementUncheckedUpdateManyWithoutInventoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutInventoryNestedInput
    tags?: InventoryTagUncheckedUpdateManyWithoutInventoryNestedInput
    access?: InventoryAccessUncheckedUpdateManyWithoutInventoryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutInventoryNestedInput
    sequence?: SequenceUncheckedUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicWrite?: BoolFieldUpdateOperationsInput | boolean
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryFieldCreateManyInventoryInput = {
    id?: string
    type: $Enums.FieldType
    slot: number
    title: string
    description?: string | null
    showInTable?: boolean
    displayOrder?: number
  }

  export type CustomIdElementCreateManyInventoryInput = {
    id?: string
    order: number
    type: $Enums.IdElemType
    param?: string | null
  }

  export type ItemCreateManyInventoryInput = {
    id?: string
    customId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version?: number
    text1?: string | null
    text2?: string | null
    text3?: string | null
    mtext1?: string | null
    mtext2?: string | null
    mtext3?: string | null
    num1?: number | null
    num2?: number | null
    num3?: number | null
    link1?: string | null
    link2?: string | null
    link3?: string | null
    bool1?: boolean | null
    bool2?: boolean | null
    bool3?: boolean | null
    img1?: string | null
    img2?: string | null
    img3?: string | null
  }

  export type InventoryTagCreateManyInventoryInput = {
    tagId: number
  }

  export type InventoryAccessCreateManyInventoryInput = {
    userId: string
    canWrite?: boolean
  }

  export type CommentCreateManyInventoryInput = {
    id?: string
    itemId?: string | null
    userId: string
    body: string
    createdAt?: Date | string
  }

  export type InventoryFieldUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    slot?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    showInTable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryFieldUncheckedUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    slot?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    showInTable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryFieldUncheckedUpdateManyWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    slot?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    showInTable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type CustomIdElementUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    type?: EnumIdElemTypeFieldUpdateOperationsInput | $Enums.IdElemType
    param?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomIdElementUncheckedUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    type?: EnumIdElemTypeFieldUpdateOperationsInput | $Enums.IdElemType
    param?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomIdElementUncheckedUpdateManyWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    type?: EnumIdElemTypeFieldUpdateOperationsInput | $Enums.IdElemType
    param?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ItemUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutItemsNestedInput
    comments?: CommentUpdateManyWithoutItemNestedInput
    likes?: LikeUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutItemNestedInput
    likes?: LikeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateManyWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    customId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
    text1?: NullableStringFieldUpdateOperationsInput | string | null
    text2?: NullableStringFieldUpdateOperationsInput | string | null
    text3?: NullableStringFieldUpdateOperationsInput | string | null
    mtext1?: NullableStringFieldUpdateOperationsInput | string | null
    mtext2?: NullableStringFieldUpdateOperationsInput | string | null
    mtext3?: NullableStringFieldUpdateOperationsInput | string | null
    num1?: NullableFloatFieldUpdateOperationsInput | number | null
    num2?: NullableFloatFieldUpdateOperationsInput | number | null
    num3?: NullableFloatFieldUpdateOperationsInput | number | null
    link1?: NullableStringFieldUpdateOperationsInput | string | null
    link2?: NullableStringFieldUpdateOperationsInput | string | null
    link3?: NullableStringFieldUpdateOperationsInput | string | null
    bool1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bool3?: NullableBoolFieldUpdateOperationsInput | boolean | null
    img1?: NullableStringFieldUpdateOperationsInput | string | null
    img2?: NullableStringFieldUpdateOperationsInput | string | null
    img3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryTagUpdateWithoutInventoryInput = {
    tag?: TagUpdateOneRequiredWithoutInventoriesNestedInput
  }

  export type InventoryTagUncheckedUpdateWithoutInventoryInput = {
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTagUncheckedUpdateManyWithoutInventoryInput = {
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryAccessUpdateWithoutInventoryInput = {
    canWrite?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAccessesNestedInput
  }

  export type InventoryAccessUncheckedUpdateWithoutInventoryInput = {
    userId?: StringFieldUpdateOperationsInput | string
    canWrite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryAccessUncheckedUpdateManyWithoutInventoryInput = {
    userId?: StringFieldUpdateOperationsInput | string
    canWrite?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CommentUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyItemInput = {
    id?: string
    inventoryId: string
    userId: string
    body: string
    createdAt?: Date | string
  }

  export type LikeCreateManyItemInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type CommentUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryTagCreateManyTagInput = {
    inventoryId: string
  }

  export type InventoryTagUpdateWithoutTagInput = {
    inventory?: InventoryUpdateOneRequiredWithoutTagsNestedInput
  }

  export type InventoryTagUncheckedUpdateWithoutTagInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
  }

  export type InventoryTagUncheckedUpdateManyWithoutTagInput = {
    inventoryId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryCountOutputTypeDefaultArgs instead
     */
    export type InventoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemCountOutputTypeDefaultArgs instead
     */
    export type ItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryDefaultArgs instead
     */
    export type InventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryFieldDefaultArgs instead
     */
    export type InventoryFieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryFieldDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomIdElementDefaultArgs instead
     */
    export type CustomIdElementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomIdElementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SequenceDefaultArgs instead
     */
    export type SequenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SequenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemDefaultArgs instead
     */
    export type ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryTagDefaultArgs instead
     */
    export type InventoryTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryAccessDefaultArgs instead
     */
    export type InventoryAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryAccessDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikeDefaultArgs instead
     */
    export type LikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}