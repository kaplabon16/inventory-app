generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  avatar     String?
  provider   String?
  providerId String?
  roles      String[] @default([])
  blocked    Boolean  @default(false)
  createdAt  DateTime @default(now())
  password   String?

  inventories Inventory[]       @relation("UserInventories")
  items       Item[]            @relation("ItemCreatedBy")
  comments    Comment[]         @relation("CommentUser")
  accesses    InventoryAccess[]
  likes       Like[]
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  inventories Inventory[]
}

model Inventory {
  id          String   @id @default(cuid())
  ownerId     String
  owner       User     @relation("UserInventories", fields: [ownerId], references: [id])
  title       String
  description String   @default("")
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  imageUrl    String?
  publicWrite Boolean  @default(false)
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  fields   InventoryField[]
  idElems  CustomIdElement[]
  items    Item[]
  tags     InventoryTag[]
  access   InventoryAccess[]
  comments Comment[]
  sequence Sequence?

  @@index([ownerId])
}

model InventoryField {
  id          String    @id @default(cuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  type        FieldType
  slot        Int
  title       String
  description String?
  showInTable Boolean   @default(false)

  @@unique([inventoryId, type, slot])
}

enum FieldType {
  TEXT
  MTEXT
  NUMBER
  LINK
  BOOL
  IMAGE
}

model CustomIdElement {
  id          String     @id @default(cuid())
  inventoryId String
  inventory   Inventory  @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  order       Int
  type        IdElemType
  param       String?
}

enum IdElemType {
  FIXED
  RAND20
  RAND32
  RAND6
  RAND9
  GUID
  DATE
  SEQ
}

model Sequence {
  inventoryId String    @id
  value       Int       @default(0)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
}

model Item {
  id          String    @id @default(cuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  customId    String
  createdById String
  createdBy   User      @relation("ItemCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  version     Int       @default(1)

  text1  String?  @db.Text
  text2  String?  @db.Text
  text3  String?  @db.Text
  mtext1 String?  @db.Text
  mtext2 String?  @db.Text
  mtext3 String?  @db.Text
  num1   Float?
  num2   Float?
  num3   Float?
  link1  String?
  link2  String?
  link3  String?
  bool1  Boolean?
  bool2  Boolean?
  bool3  Boolean?

  img1 String?
  img2 String?
  img3 String?

  comments Comment[]
  likes    Like[]

  @@unique([inventoryId, customId])
  @@index([inventoryId])
}

model Comment {
  id          String   @id @default(cuid())
  inventoryId String
  itemId      String?
  userId      String
  body        String   @db.Text
  createdAt   DateTime @default(now())

  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  item      Item?     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User      @relation("CommentUser", fields: [userId], references: [id])
}

model Tag {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  inventories InventoryTag[]
}

model InventoryTag {
  inventoryId String
  tagId       Int

  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([inventoryId, tagId])
}

model InventoryAccess {
  inventoryId String
  userId      String
  canWrite    Boolean @default(false)

  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([inventoryId, userId])
}

model Like {
  id        String   @id @default(cuid())
  itemId    String
  userId    String
  createdAt DateTime @default(now())

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
}
